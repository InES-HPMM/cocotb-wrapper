[project]
authors = [
  {name = "Thierry Delafontaine", email = "deaa@zhaw.ch"},
]
maintainers = [
  {name = "Thierry Delafontaine", email = "deaa@zhaw.ch"},
]
license = {text = "MIT"}
requires-python = ">=3.8"
dependencies = [
  "cocotb>=1.8.1,<2.0.0",
  "cocotb-bus>=0.2.1,<1.0.0",
  "cocotbext-axi>=0.1.24,<1.0.0",
]
name = "cocotb-wrapper"
version = "1.1.2"
description = "A wrapper around cocotb that facilitates using cocotb"
readme = "README.md"
keywords = [
    "cocotb",
    "fpga",
    "testing",
    "vhdl",
    "verilog",
]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering",
]

[project.urls]
repository = "https://github.com/InES-HPMM/cocotb-wrapper"

[dependency-groups]
dev = [
    "basedpyright>=1.28.1",
    "coverage>=7.3.2",
    "pre-commit>=3.5.0",
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-sugar>=0.9.7",
    "pytest-xdist>=3.3.1",
    "ruff>=0.1.2",
    "tox>=4.11.3",
    "types-toml>=0.10.8.7",
    "typing-extensions>=4.6",
]
docs = [
    "myst-parser>=2.0.0",
    "pydata-sphinx-theme>=0.14.2",
    "sphinx>=7.1",
    "sphinx-copybutton>=0.5.2",
    "sphinx-togglebutton>=0.3.2",
    "sphinxcontrib-bibtex>=2.6.1",
    "sphinxcontrib-katex>=0.9.9",
    "sphinxcontrib-makedomain>=0.1.1",
    "toml>=0.10.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.coverage.run]
branch = true
omit = [
  "tests/*",
]

[tool.coverage.report]
skip_covered = false
skip_empty = true
exclude_lines = [
  "pragma: no cover",
  "raise NotImplementedError",
]
omit = [
  "tests/*",
]

[tool.coverage.html]
directory = "report/coverage/html"
title = "Code Coverage of cocotb-wrapper"

[tool.coverage.xml]
output = "report/coverage/coverage.xml"

[tool.pyright]
include = [
  "cocotb_wrapper/",
  "docs/",
]

[tool.pytest.ini_options]
addopts = [
  "--import-mode=importlib",
  # generate a coverage report
  "--cov=cocotb_wrapper",
  "--cov-config=pyproject.toml",
  # distribute testing tasks across all cores
  "--numprocesses=auto",
  # show summary of all tests that did not pass
  "-rEfX",
  # raise an error when parsing the config fails
  "--strict-config",
]
log_cli=true
python_files = "test_*"
python_functions = "test_*"
testpaths = "tests"

[tool.ruff]
exclude = [
  "typings",
]
line-length = 80
target-version = "py38"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
ignore = [
    "D105", # Missing docstring in magic method
    "E501", # Disable the line length in docstrings
    "ISC001", # Conflicts with the formatter
    "N803", # Argument casing
    "N806", # Relax: Variable name in function should be lowercase
    "N999", # Module names
    "NPY002", # np.random.Generator may not be preferred in all cases
    "SIM102", # We don't perfer always combining if branches
    "SIM108", # We don't encourage ternary operators
    "SIM114", # Don't combine if branches for debugability
    "SIM116", # Don't use dict lookup to replace if-else
]
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # Pyflakes
    "G", # flake8-logging-format
    "I", # isort
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "NPY", # modern numpy
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "TID252", # Relative imports
    "UP", # pyupgrade
    "W", # pycodestyle
    "YTT", # flake8-2020
]
unfixable = [
    "SIM112", # Envvars should not be modified
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D100", "D101", "D102", "D103", "D104", "D107"]

[tool.ruff.lint.pydocstyle]
convention = "google"
