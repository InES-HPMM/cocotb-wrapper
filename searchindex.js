Search.setIndex({"docnames": ["dev/index", "dev/setup", "dev/todo", "index", "reference/axi", "reference/generated/cocotb_wrapper.axi.AxiBurstSize", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_1", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_128", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_16", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_2", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_32", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_4", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_64", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_8", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.as_integer_ratio", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.bit_count", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.bit_length", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.conjugate", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.denominator", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.from_bytes", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.imag", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.is_integer", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.numerator", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.real", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.to_bytes", "reference/generated/cocotb_wrapper.axi.AxiBurstType", "reference/generated/cocotb_wrapper.axi.AxiBurstType.FIXED", "reference/generated/cocotb_wrapper.axi.AxiBurstType.INCR", "reference/generated/cocotb_wrapper.axi.AxiBurstType.WRAP", "reference/generated/cocotb_wrapper.axi.AxiBurstType.as_integer_ratio", "reference/generated/cocotb_wrapper.axi.AxiBurstType.bit_count", "reference/generated/cocotb_wrapper.axi.AxiBurstType.bit_length", "reference/generated/cocotb_wrapper.axi.AxiBurstType.conjugate", "reference/generated/cocotb_wrapper.axi.AxiBurstType.denominator", "reference/generated/cocotb_wrapper.axi.AxiBurstType.from_bytes", "reference/generated/cocotb_wrapper.axi.AxiBurstType.imag", "reference/generated/cocotb_wrapper.axi.AxiBurstType.is_integer", "reference/generated/cocotb_wrapper.axi.AxiBurstType.numerator", "reference/generated/cocotb_wrapper.axi.AxiBurstType.real", "reference/generated/cocotb_wrapper.axi.AxiBurstType.to_bytes", "reference/generated/cocotb_wrapper.axi.AxiCacheBit", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.B", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.M", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.RA", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.WA", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.as_integer_ratio", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.bit_count", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.bit_length", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.conjugate", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.denominator", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.from_bytes", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.imag", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.is_integer", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.numerator", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.real", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.to_bytes", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster.disable", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster.enable", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster.read", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster.set_backpressure_generator", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster.set_idle_generator", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster.setup", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster.write", "reference/generated/cocotb_wrapper.axi.AxiLiteRam", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.disable", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.enable", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.hexdump", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.read", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.set_backpressure_generator", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.set_idle_generator", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.setup", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.write", "reference/generated/cocotb_wrapper.axi.AxiLockType", "reference/generated/cocotb_wrapper.axi.AxiLockType.EXCLUSIVE", "reference/generated/cocotb_wrapper.axi.AxiLockType.NORMAL", "reference/generated/cocotb_wrapper.axi.AxiLockType.as_integer_ratio", "reference/generated/cocotb_wrapper.axi.AxiLockType.bit_count", "reference/generated/cocotb_wrapper.axi.AxiLockType.bit_length", "reference/generated/cocotb_wrapper.axi.AxiLockType.conjugate", "reference/generated/cocotb_wrapper.axi.AxiLockType.denominator", "reference/generated/cocotb_wrapper.axi.AxiLockType.from_bytes", "reference/generated/cocotb_wrapper.axi.AxiLockType.imag", "reference/generated/cocotb_wrapper.axi.AxiLockType.is_integer", "reference/generated/cocotb_wrapper.axi.AxiLockType.numerator", "reference/generated/cocotb_wrapper.axi.AxiLockType.real", "reference/generated/cocotb_wrapper.axi.AxiLockType.to_bytes", "reference/generated/cocotb_wrapper.axi.AxiMaster", "reference/generated/cocotb_wrapper.axi.AxiMaster.disable", "reference/generated/cocotb_wrapper.axi.AxiMaster.enable", "reference/generated/cocotb_wrapper.axi.AxiMaster.read", "reference/generated/cocotb_wrapper.axi.AxiMaster.set_backpressure_generator", "reference/generated/cocotb_wrapper.axi.AxiMaster.set_idle_generator", "reference/generated/cocotb_wrapper.axi.AxiMaster.setup", "reference/generated/cocotb_wrapper.axi.AxiMaster.write", "reference/generated/cocotb_wrapper.axi.AxiProt", "reference/generated/cocotb_wrapper.axi.AxiProt.INSTRUCTION", "reference/generated/cocotb_wrapper.axi.AxiProt.NONSECURE", "reference/generated/cocotb_wrapper.axi.AxiProt.PRIVILEGED", "reference/generated/cocotb_wrapper.axi.AxiProt.as_integer_ratio", "reference/generated/cocotb_wrapper.axi.AxiProt.bit_count", "reference/generated/cocotb_wrapper.axi.AxiProt.bit_length", "reference/generated/cocotb_wrapper.axi.AxiProt.conjugate", "reference/generated/cocotb_wrapper.axi.AxiProt.denominator", "reference/generated/cocotb_wrapper.axi.AxiProt.from_bytes", "reference/generated/cocotb_wrapper.axi.AxiProt.imag", "reference/generated/cocotb_wrapper.axi.AxiProt.is_integer", "reference/generated/cocotb_wrapper.axi.AxiProt.numerator", "reference/generated/cocotb_wrapper.axi.AxiProt.real", "reference/generated/cocotb_wrapper.axi.AxiProt.to_bytes", "reference/generated/cocotb_wrapper.axi.AxiRam", "reference/generated/cocotb_wrapper.axi.AxiRam.disable", "reference/generated/cocotb_wrapper.axi.AxiRam.enable", "reference/generated/cocotb_wrapper.axi.AxiRam.hexdump", "reference/generated/cocotb_wrapper.axi.AxiRam.read", "reference/generated/cocotb_wrapper.axi.AxiRam.set_backpressure_generator", "reference/generated/cocotb_wrapper.axi.AxiRam.set_idle_generator", "reference/generated/cocotb_wrapper.axi.AxiRam.setup", "reference/generated/cocotb_wrapper.axi.AxiRam.write", "reference/generated/cocotb_wrapper.axi.AxiResp", "reference/generated/cocotb_wrapper.axi.AxiResp.DECERR", "reference/generated/cocotb_wrapper.axi.AxiResp.EXOKAY", "reference/generated/cocotb_wrapper.axi.AxiResp.OKAY", "reference/generated/cocotb_wrapper.axi.AxiResp.SLVERR", "reference/generated/cocotb_wrapper.axi.AxiResp.as_integer_ratio", "reference/generated/cocotb_wrapper.axi.AxiResp.bit_count", "reference/generated/cocotb_wrapper.axi.AxiResp.bit_length", "reference/generated/cocotb_wrapper.axi.AxiResp.conjugate", "reference/generated/cocotb_wrapper.axi.AxiResp.denominator", "reference/generated/cocotb_wrapper.axi.AxiResp.from_bytes", "reference/generated/cocotb_wrapper.axi.AxiResp.imag", "reference/generated/cocotb_wrapper.axi.AxiResp.is_integer", "reference/generated/cocotb_wrapper.axi.AxiResp.numerator", "reference/generated/cocotb_wrapper.axi.AxiResp.real", "reference/generated/cocotb_wrapper.axi.AxiResp.to_bytes", "reference/generated/cocotb_wrapper.axi.AxiStreamSink", "reference/generated/cocotb_wrapper.axi.AxiStreamSink.disable", "reference/generated/cocotb_wrapper.axi.AxiStreamSink.enable", "reference/generated/cocotb_wrapper.axi.AxiStreamSink.read", "reference/generated/cocotb_wrapper.axi.AxiStreamSink.set_pause_generator", "reference/generated/cocotb_wrapper.axi.AxiStreamSink.setup", "reference/generated/cocotb_wrapper.axi.AxiStreamSource", "reference/generated/cocotb_wrapper.axi.AxiStreamSource.disable", "reference/generated/cocotb_wrapper.axi.AxiStreamSource.enable", "reference/generated/cocotb_wrapper.axi.AxiStreamSource.set_pause_generator", "reference/generated/cocotb_wrapper.axi.AxiStreamSource.setup", "reference/generated/cocotb_wrapper.axi.AxiStreamSource.write", "reference/generated/cocotb_wrapper.axi.RandomAxiLitePayloadGenerator", "reference/generated/cocotb_wrapper.axi.RandomAxiLitePayloadGenerator.get_payload", "reference/generated/cocotb_wrapper.axi.RandomAxiPayloadGenerator", "reference/generated/cocotb_wrapper.axi.RandomAxiPayloadGenerator.get_payload", "reference/generated/cocotb_wrapper.axi.RandomAxiStreamPayloadGenerator", "reference/generated/cocotb_wrapper.axi.RandomAxiStreamPayloadGenerator.get_payload", "reference/generated/cocotb_wrapper.testbench.Testbench", "reference/generated/cocotb_wrapper.testbench.Testbench.name", "reference/generated/cocotb_wrapper.testbench.Testbench.register_setup", "reference/generated/cocotb_wrapper.testbench.Testbench.register_teardown", "reference/generated/cocotb_wrapper.testbench.Testbench.register_test", "reference/generated/cocotb_wrapper.testbench.Testbench.reset", "reference/generated/cocotb_wrapper.testbench.Testbench.start_clk", "reference/generated/cocotb_wrapper.testbench._Test", "reference/index", "reference/testbench", "release", "user/index", "user/quickstart"], "filenames": ["dev/index.rst", "dev/setup.rst", "dev/todo.rst", "index.rst", "reference/axi.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_1.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_128.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_16.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_2.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_32.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_4.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_64.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.SIZE_8.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.as_integer_ratio.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.bit_count.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.bit_length.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.conjugate.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.denominator.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.from_bytes.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.imag.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.is_integer.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.numerator.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.real.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstSize.to_bytes.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstType.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstType.FIXED.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstType.INCR.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstType.WRAP.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstType.as_integer_ratio.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstType.bit_count.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstType.bit_length.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstType.conjugate.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstType.denominator.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstType.from_bytes.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstType.imag.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstType.is_integer.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstType.numerator.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstType.real.rst", "reference/generated/cocotb_wrapper.axi.AxiBurstType.to_bytes.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.B.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.M.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.RA.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.WA.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.as_integer_ratio.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.bit_count.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.bit_length.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.conjugate.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.denominator.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.from_bytes.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.imag.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.is_integer.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.numerator.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.real.rst", "reference/generated/cocotb_wrapper.axi.AxiCacheBit.to_bytes.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster.disable.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster.enable.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster.read.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster.set_backpressure_generator.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster.set_idle_generator.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster.setup.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteMaster.write.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.disable.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.enable.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.hexdump.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.read.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.set_backpressure_generator.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.set_idle_generator.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.setup.rst", "reference/generated/cocotb_wrapper.axi.AxiLiteRam.write.rst", "reference/generated/cocotb_wrapper.axi.AxiLockType.rst", "reference/generated/cocotb_wrapper.axi.AxiLockType.EXCLUSIVE.rst", "reference/generated/cocotb_wrapper.axi.AxiLockType.NORMAL.rst", "reference/generated/cocotb_wrapper.axi.AxiLockType.as_integer_ratio.rst", "reference/generated/cocotb_wrapper.axi.AxiLockType.bit_count.rst", "reference/generated/cocotb_wrapper.axi.AxiLockType.bit_length.rst", "reference/generated/cocotb_wrapper.axi.AxiLockType.conjugate.rst", "reference/generated/cocotb_wrapper.axi.AxiLockType.denominator.rst", "reference/generated/cocotb_wrapper.axi.AxiLockType.from_bytes.rst", "reference/generated/cocotb_wrapper.axi.AxiLockType.imag.rst", "reference/generated/cocotb_wrapper.axi.AxiLockType.is_integer.rst", "reference/generated/cocotb_wrapper.axi.AxiLockType.numerator.rst", "reference/generated/cocotb_wrapper.axi.AxiLockType.real.rst", "reference/generated/cocotb_wrapper.axi.AxiLockType.to_bytes.rst", "reference/generated/cocotb_wrapper.axi.AxiMaster.rst", "reference/generated/cocotb_wrapper.axi.AxiMaster.disable.rst", "reference/generated/cocotb_wrapper.axi.AxiMaster.enable.rst", "reference/generated/cocotb_wrapper.axi.AxiMaster.read.rst", "reference/generated/cocotb_wrapper.axi.AxiMaster.set_backpressure_generator.rst", "reference/generated/cocotb_wrapper.axi.AxiMaster.set_idle_generator.rst", "reference/generated/cocotb_wrapper.axi.AxiMaster.setup.rst", "reference/generated/cocotb_wrapper.axi.AxiMaster.write.rst", "reference/generated/cocotb_wrapper.axi.AxiProt.rst", "reference/generated/cocotb_wrapper.axi.AxiProt.INSTRUCTION.rst", "reference/generated/cocotb_wrapper.axi.AxiProt.NONSECURE.rst", "reference/generated/cocotb_wrapper.axi.AxiProt.PRIVILEGED.rst", "reference/generated/cocotb_wrapper.axi.AxiProt.as_integer_ratio.rst", "reference/generated/cocotb_wrapper.axi.AxiProt.bit_count.rst", "reference/generated/cocotb_wrapper.axi.AxiProt.bit_length.rst", "reference/generated/cocotb_wrapper.axi.AxiProt.conjugate.rst", "reference/generated/cocotb_wrapper.axi.AxiProt.denominator.rst", "reference/generated/cocotb_wrapper.axi.AxiProt.from_bytes.rst", "reference/generated/cocotb_wrapper.axi.AxiProt.imag.rst", "reference/generated/cocotb_wrapper.axi.AxiProt.is_integer.rst", "reference/generated/cocotb_wrapper.axi.AxiProt.numerator.rst", "reference/generated/cocotb_wrapper.axi.AxiProt.real.rst", "reference/generated/cocotb_wrapper.axi.AxiProt.to_bytes.rst", "reference/generated/cocotb_wrapper.axi.AxiRam.rst", "reference/generated/cocotb_wrapper.axi.AxiRam.disable.rst", "reference/generated/cocotb_wrapper.axi.AxiRam.enable.rst", "reference/generated/cocotb_wrapper.axi.AxiRam.hexdump.rst", "reference/generated/cocotb_wrapper.axi.AxiRam.read.rst", "reference/generated/cocotb_wrapper.axi.AxiRam.set_backpressure_generator.rst", "reference/generated/cocotb_wrapper.axi.AxiRam.set_idle_generator.rst", "reference/generated/cocotb_wrapper.axi.AxiRam.setup.rst", "reference/generated/cocotb_wrapper.axi.AxiRam.write.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.DECERR.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.EXOKAY.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.OKAY.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.SLVERR.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.as_integer_ratio.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.bit_count.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.bit_length.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.conjugate.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.denominator.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.from_bytes.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.imag.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.is_integer.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.numerator.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.real.rst", "reference/generated/cocotb_wrapper.axi.AxiResp.to_bytes.rst", "reference/generated/cocotb_wrapper.axi.AxiStreamSink.rst", "reference/generated/cocotb_wrapper.axi.AxiStreamSink.disable.rst", "reference/generated/cocotb_wrapper.axi.AxiStreamSink.enable.rst", "reference/generated/cocotb_wrapper.axi.AxiStreamSink.read.rst", "reference/generated/cocotb_wrapper.axi.AxiStreamSink.set_pause_generator.rst", "reference/generated/cocotb_wrapper.axi.AxiStreamSink.setup.rst", "reference/generated/cocotb_wrapper.axi.AxiStreamSource.rst", "reference/generated/cocotb_wrapper.axi.AxiStreamSource.disable.rst", "reference/generated/cocotb_wrapper.axi.AxiStreamSource.enable.rst", "reference/generated/cocotb_wrapper.axi.AxiStreamSource.set_pause_generator.rst", "reference/generated/cocotb_wrapper.axi.AxiStreamSource.setup.rst", "reference/generated/cocotb_wrapper.axi.AxiStreamSource.write.rst", "reference/generated/cocotb_wrapper.axi.RandomAxiLitePayloadGenerator.rst", "reference/generated/cocotb_wrapper.axi.RandomAxiLitePayloadGenerator.get_payload.rst", "reference/generated/cocotb_wrapper.axi.RandomAxiPayloadGenerator.rst", "reference/generated/cocotb_wrapper.axi.RandomAxiPayloadGenerator.get_payload.rst", "reference/generated/cocotb_wrapper.axi.RandomAxiStreamPayloadGenerator.rst", "reference/generated/cocotb_wrapper.axi.RandomAxiStreamPayloadGenerator.get_payload.rst", "reference/generated/cocotb_wrapper.testbench.Testbench.rst", "reference/generated/cocotb_wrapper.testbench.Testbench.name.rst", "reference/generated/cocotb_wrapper.testbench.Testbench.register_setup.rst", "reference/generated/cocotb_wrapper.testbench.Testbench.register_teardown.rst", "reference/generated/cocotb_wrapper.testbench.Testbench.register_test.rst", "reference/generated/cocotb_wrapper.testbench.Testbench.reset.rst", "reference/generated/cocotb_wrapper.testbench.Testbench.start_clk.rst", "reference/generated/cocotb_wrapper.testbench._Test.rst", "reference/index.rst", "reference/testbench.rst", "release.rst", "user/index.rst", "user/quickstart.rst"], "titles": ["cocotb-wrapper Development Guide", "Development Setup", "TODOs", "Welcome to the cocotb-wrapper documentation!", "Testing entities with AXI interfaces", "cocotb_wrapper.axi.AxiBurstSize", "cocotb_wrapper.axi.AxiBurstSize.SIZE_1", "cocotb_wrapper.axi.AxiBurstSize.SIZE_128", "cocotb_wrapper.axi.AxiBurstSize.SIZE_16", "cocotb_wrapper.axi.AxiBurstSize.SIZE_2", "cocotb_wrapper.axi.AxiBurstSize.SIZE_32", "cocotb_wrapper.axi.AxiBurstSize.SIZE_4", "cocotb_wrapper.axi.AxiBurstSize.SIZE_64", "cocotb_wrapper.axi.AxiBurstSize.SIZE_8", "cocotb_wrapper.axi.AxiBurstSize.as_integer_ratio", "cocotb_wrapper.axi.AxiBurstSize.bit_count", "cocotb_wrapper.axi.AxiBurstSize.bit_length", "cocotb_wrapper.axi.AxiBurstSize.conjugate", "cocotb_wrapper.axi.AxiBurstSize.denominator", "cocotb_wrapper.axi.AxiBurstSize.from_bytes", "cocotb_wrapper.axi.AxiBurstSize.imag", "cocotb_wrapper.axi.AxiBurstSize.is_integer", "cocotb_wrapper.axi.AxiBurstSize.numerator", "cocotb_wrapper.axi.AxiBurstSize.real", "cocotb_wrapper.axi.AxiBurstSize.to_bytes", "cocotb_wrapper.axi.AxiBurstType", "cocotb_wrapper.axi.AxiBurstType.FIXED", "cocotb_wrapper.axi.AxiBurstType.INCR", "cocotb_wrapper.axi.AxiBurstType.WRAP", "cocotb_wrapper.axi.AxiBurstType.as_integer_ratio", "cocotb_wrapper.axi.AxiBurstType.bit_count", "cocotb_wrapper.axi.AxiBurstType.bit_length", "cocotb_wrapper.axi.AxiBurstType.conjugate", "cocotb_wrapper.axi.AxiBurstType.denominator", "cocotb_wrapper.axi.AxiBurstType.from_bytes", "cocotb_wrapper.axi.AxiBurstType.imag", "cocotb_wrapper.axi.AxiBurstType.is_integer", "cocotb_wrapper.axi.AxiBurstType.numerator", "cocotb_wrapper.axi.AxiBurstType.real", "cocotb_wrapper.axi.AxiBurstType.to_bytes", "cocotb_wrapper.axi.AxiCacheBit", "cocotb_wrapper.axi.AxiCacheBit.B", "cocotb_wrapper.axi.AxiCacheBit.M", "cocotb_wrapper.axi.AxiCacheBit.RA", "cocotb_wrapper.axi.AxiCacheBit.WA", "cocotb_wrapper.axi.AxiCacheBit.as_integer_ratio", "cocotb_wrapper.axi.AxiCacheBit.bit_count", "cocotb_wrapper.axi.AxiCacheBit.bit_length", "cocotb_wrapper.axi.AxiCacheBit.conjugate", "cocotb_wrapper.axi.AxiCacheBit.denominator", "cocotb_wrapper.axi.AxiCacheBit.from_bytes", "cocotb_wrapper.axi.AxiCacheBit.imag", "cocotb_wrapper.axi.AxiCacheBit.is_integer", "cocotb_wrapper.axi.AxiCacheBit.numerator", "cocotb_wrapper.axi.AxiCacheBit.real", "cocotb_wrapper.axi.AxiCacheBit.to_bytes", "cocotb_wrapper.axi.AxiLiteMaster", "cocotb_wrapper.axi.AxiLiteMaster.disable", "cocotb_wrapper.axi.AxiLiteMaster.enable", "cocotb_wrapper.axi.AxiLiteMaster.read", "cocotb_wrapper.axi.AxiLiteMaster.set_backpressure_generator", "cocotb_wrapper.axi.AxiLiteMaster.set_idle_generator", "cocotb_wrapper.axi.AxiLiteMaster.setup", "cocotb_wrapper.axi.AxiLiteMaster.write", "cocotb_wrapper.axi.AxiLiteRam", "cocotb_wrapper.axi.AxiLiteRam.disable", "cocotb_wrapper.axi.AxiLiteRam.enable", "cocotb_wrapper.axi.AxiLiteRam.hexdump", "cocotb_wrapper.axi.AxiLiteRam.read", "cocotb_wrapper.axi.AxiLiteRam.set_backpressure_generator", "cocotb_wrapper.axi.AxiLiteRam.set_idle_generator", "cocotb_wrapper.axi.AxiLiteRam.setup", "cocotb_wrapper.axi.AxiLiteRam.write", "cocotb_wrapper.axi.AxiLockType", "cocotb_wrapper.axi.AxiLockType.EXCLUSIVE", "cocotb_wrapper.axi.AxiLockType.NORMAL", "cocotb_wrapper.axi.AxiLockType.as_integer_ratio", "cocotb_wrapper.axi.AxiLockType.bit_count", "cocotb_wrapper.axi.AxiLockType.bit_length", "cocotb_wrapper.axi.AxiLockType.conjugate", "cocotb_wrapper.axi.AxiLockType.denominator", "cocotb_wrapper.axi.AxiLockType.from_bytes", "cocotb_wrapper.axi.AxiLockType.imag", "cocotb_wrapper.axi.AxiLockType.is_integer", "cocotb_wrapper.axi.AxiLockType.numerator", "cocotb_wrapper.axi.AxiLockType.real", "cocotb_wrapper.axi.AxiLockType.to_bytes", "cocotb_wrapper.axi.AxiMaster", "cocotb_wrapper.axi.AxiMaster.disable", "cocotb_wrapper.axi.AxiMaster.enable", "cocotb_wrapper.axi.AxiMaster.read", "cocotb_wrapper.axi.AxiMaster.set_backpressure_generator", "cocotb_wrapper.axi.AxiMaster.set_idle_generator", "cocotb_wrapper.axi.AxiMaster.setup", "cocotb_wrapper.axi.AxiMaster.write", "cocotb_wrapper.axi.AxiProt", "cocotb_wrapper.axi.AxiProt.INSTRUCTION", "cocotb_wrapper.axi.AxiProt.NONSECURE", "cocotb_wrapper.axi.AxiProt.PRIVILEGED", "cocotb_wrapper.axi.AxiProt.as_integer_ratio", "cocotb_wrapper.axi.AxiProt.bit_count", "cocotb_wrapper.axi.AxiProt.bit_length", "cocotb_wrapper.axi.AxiProt.conjugate", "cocotb_wrapper.axi.AxiProt.denominator", "cocotb_wrapper.axi.AxiProt.from_bytes", "cocotb_wrapper.axi.AxiProt.imag", "cocotb_wrapper.axi.AxiProt.is_integer", "cocotb_wrapper.axi.AxiProt.numerator", "cocotb_wrapper.axi.AxiProt.real", "cocotb_wrapper.axi.AxiProt.to_bytes", "cocotb_wrapper.axi.AxiRam", "cocotb_wrapper.axi.AxiRam.disable", "cocotb_wrapper.axi.AxiRam.enable", "cocotb_wrapper.axi.AxiRam.hexdump", "cocotb_wrapper.axi.AxiRam.read", "cocotb_wrapper.axi.AxiRam.set_backpressure_generator", "cocotb_wrapper.axi.AxiRam.set_idle_generator", "cocotb_wrapper.axi.AxiRam.setup", "cocotb_wrapper.axi.AxiRam.write", "cocotb_wrapper.axi.AxiResp", "cocotb_wrapper.axi.AxiResp.DECERR", "cocotb_wrapper.axi.AxiResp.EXOKAY", "cocotb_wrapper.axi.AxiResp.OKAY", "cocotb_wrapper.axi.AxiResp.SLVERR", "cocotb_wrapper.axi.AxiResp.as_integer_ratio", "cocotb_wrapper.axi.AxiResp.bit_count", "cocotb_wrapper.axi.AxiResp.bit_length", "cocotb_wrapper.axi.AxiResp.conjugate", "cocotb_wrapper.axi.AxiResp.denominator", "cocotb_wrapper.axi.AxiResp.from_bytes", "cocotb_wrapper.axi.AxiResp.imag", "cocotb_wrapper.axi.AxiResp.is_integer", "cocotb_wrapper.axi.AxiResp.numerator", "cocotb_wrapper.axi.AxiResp.real", "cocotb_wrapper.axi.AxiResp.to_bytes", "cocotb_wrapper.axi.AxiStreamSink", "cocotb_wrapper.axi.AxiStreamSink.disable", "cocotb_wrapper.axi.AxiStreamSink.enable", "cocotb_wrapper.axi.AxiStreamSink.read", "cocotb_wrapper.axi.AxiStreamSink.set_pause_generator", "cocotb_wrapper.axi.AxiStreamSink.setup", "cocotb_wrapper.axi.AxiStreamSource", "cocotb_wrapper.axi.AxiStreamSource.disable", "cocotb_wrapper.axi.AxiStreamSource.enable", "cocotb_wrapper.axi.AxiStreamSource.set_pause_generator", "cocotb_wrapper.axi.AxiStreamSource.setup", "cocotb_wrapper.axi.AxiStreamSource.write", "cocotb_wrapper.axi.RandomAxiLitePayloadGenerator", "cocotb_wrapper.axi.RandomAxiLitePayloadGenerator.get_payload", "cocotb_wrapper.axi.RandomAxiPayloadGenerator", "cocotb_wrapper.axi.RandomAxiPayloadGenerator.get_payload", "cocotb_wrapper.axi.RandomAxiStreamPayloadGenerator", "cocotb_wrapper.axi.RandomAxiStreamPayloadGenerator.get_payload", "cocotb_wrapper.testbench.Testbench", "cocotb_wrapper.testbench.Testbench.name", "cocotb_wrapper.testbench.Testbench.register_setup", "cocotb_wrapper.testbench.Testbench.register_teardown", "cocotb_wrapper.testbench.Testbench.register_test", "cocotb_wrapper.testbench.Testbench.reset", "cocotb_wrapper.testbench.Testbench.start_clk", "cocotb_wrapper.testbench._Test", "cocotb-wrapper Reference", "Testbench", "Release notes", "cocotb-wrapper User Guide", "Quickstart"], "terms": {"setup": [0, 3, 155, 162, 165], "thi": [1, 3, 28, 41, 42, 43, 44, 96, 157, 160, 162, 163, 165], "project": [1, 3, 163], "i": [1, 2, 5, 14, 19, 24, 26, 27, 28, 29, 34, 39, 41, 42, 43, 44, 45, 50, 55, 76, 81, 86, 96, 99, 104, 109, 120, 124, 129, 134, 153, 157, 159, 160, 165], "built": [1, 19, 34, 50, 81, 104, 129], "poetri": [1, 163], "set": [1, 162, 165], "up": 1, "environ": [1, 163], "veri": 1, "easi": 1, "onc": 1, "you": [1, 162], "have": [1, 165], "instal": [1, 163], "run": 1, "dev": 1, "doc": 1, "which": [1, 59, 90, 165], "creat": [1, 160, 161, 165], "virtual": 1, "necessari": [1, 16, 31, 47, 78, 101, 126], "tool": 1, "gener": [1, 60, 61, 69, 70, 91, 92, 115, 116, 120, 139, 144, 147, 149, 151, 163, 165], "document": 1, "ar": [1, 19, 26, 34, 50, 81, 104, 129, 162, 165], "now": [1, 165], "free": 1, "either": [1, 19, 34, 50, 81, 104, 121, 129], "command": 1, "through": 1, "spawn": 1, "shell": 1, "within": [1, 26, 162, 165], "Be": 1, "sure": [1, 162], "pre": 1, "commit": 1, "hook": 1, "befor": [1, 157, 160, 162, 165], "anyth": 1, "automat": [1, 90, 162], "check": 1, "your": [1, 162], "code": 1, "make": [1, 155, 156, 162], "compli": 1, "rest": 1, "add": [2, 56, 64, 87, 110, 135, 141, 147, 149, 151, 163], "usag": [2, 56, 64, 87, 110, 135, 141, 147, 149, 151], "exampl": [2, 19, 27, 34, 50, 56, 64, 81, 87, 104, 110, 129, 135, 141, 147, 149, 151], "The": [2, 4, 5, 14, 19, 24, 25, 26, 27, 28, 29, 34, 39, 40, 43, 44, 45, 50, 55, 56, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 76, 81, 86, 87, 90, 91, 92, 93, 94, 95, 99, 104, 109, 110, 113, 114, 115, 116, 117, 118, 119, 124, 129, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 165], "origin": [2, 14, 29, 45, 76, 99, 123, 124], "entri": 2, "locat": [2, 163], "opt": 2, "hostedtoolcach": 2, "python": [2, 163], "3": [2, 13, 15, 30, 46, 77, 100, 120, 125, 163], "12": [2, 161], "9": 2, "x64": 2, "lib": 2, "python3": 2, "site": 2, "packag": 2, "cocotb_wrapp": [2, 165], "axi": [2, 3, 161, 165], "py": 2, "docstr": 2, "axilitemast": 2, "line": [2, 28, 67, 113], "axiliteram": 2, "aximast": 2, "axiram": 2, "axistreamsink": 2, "axistreamsourc": 2, "randomaxilitepayloadgener": 2, "randomaxipayloadgener": 2, "randomaxistreampayloadgener": 2, "wrapp": 3, "around": [3, 4, 28, 56, 64, 87, 110, 135, 141, 162, 165], "cocotbext": [3, 4, 56, 64, 87, 110, 135, 141, 165], "librari": 3, "simplifi": 3, "us": [3, 19, 24, 25, 28, 34, 39, 50, 55, 81, 86, 95, 104, 109, 123, 129, 134, 160, 162, 163], "provid": [3, 4, 162, 165], "compon": [3, 41, 120, 162, 165], "version": 3, "1": [3, 5, 6, 9, 14, 24, 25, 27, 29, 39, 40, 41, 45, 55, 56, 60, 61, 64, 69, 70, 73, 74, 76, 86, 87, 91, 92, 95, 98, 99, 109, 110, 115, 116, 119, 121, 124, 134, 135, 139, 141, 144, 153, 160, 161], "class": [4, 5, 25, 40, 56, 64, 73, 87, 95, 110, 119, 135, 141, 147, 149, 151, 153, 160, 162, 165], "instanti": [4, 160], "These": 4, "wrap": 4, "standard": [4, 162], "across": 4, "all": [4, 26, 163, 165], "type": [4, 5, 21, 25, 28, 36, 40, 52, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 83, 88, 89, 90, 91, 92, 93, 94, 95, 106, 111, 112, 113, 114, 115, 116, 117, 118, 119, 131, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 150, 152, 155, 156, 157, 158, 159, 165], "fulli": 4, "fledg": 4, "lighter": 4, "applic": 4, "relat": 4, "enumer": 4, "valu": [5, 15, 19, 24, 25, 27, 30, 34, 39, 40, 46, 50, 55, 73, 77, 81, 86, 95, 100, 104, 109, 119, 125, 129, 134, 147, 149, 151, 158], "name": [5, 25, 40, 56, 64, 73, 87, 95, 110, 119, 135, 141, 153, 163], "given": [5, 19, 24, 25, 34, 39, 40, 50, 55, 60, 61, 62, 69, 70, 71, 73, 81, 86, 91, 92, 93, 95, 104, 109, 115, 116, 117, 119, 129, 134, 139, 140, 144, 145, 157, 160], "modul": [5, 25, 40, 73, 95, 119, 161, 165], "none": [5, 25, 40, 57, 58, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 73, 88, 89, 90, 91, 92, 93, 94, 95, 111, 112, 113, 115, 116, 117, 118, 119, 136, 137, 139, 140, 142, 143, 144, 145, 146, 153, 157, 158, 159, 160], "qualnam": [5, 25, 40, 73, 95, 119], "start": [5, 25, 27, 28, 40, 59, 67, 68, 73, 90, 95, 113, 114, 119, 159, 162, 165], "boundari": [5, 25, 28, 40, 73, 95, 119], "sourc": [5, 25, 40, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 87, 88, 89, 90, 91, 92, 93, 94, 95, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160], "number": [5, 15, 16, 18, 20, 22, 23, 24, 28, 30, 31, 33, 35, 37, 38, 39, 41, 46, 47, 49, 51, 53, 54, 55, 77, 78, 80, 82, 84, 85, 86, 100, 101, 103, 105, 107, 108, 109, 125, 126, 128, 130, 132, 133, 134, 159, 162, 165], "byte": [5, 19, 24, 26, 27, 34, 39, 50, 55, 59, 63, 64, 67, 68, 72, 81, 86, 90, 94, 104, 109, 110, 113, 114, 118, 129, 134, 138, 146, 148, 150, 152], "each": [5, 26, 27, 28, 67, 113, 147, 149, 151, 162, 165], "data": [5, 28, 59, 63, 72, 90, 94, 96, 118, 138, 146], "transfer": [5, 26, 27, 28, 163], "write": [5, 25, 44, 61, 70, 90, 92, 116, 121, 162], "transact": [5, 25, 40, 41, 42, 43, 44, 73, 95, 120], "burst": [5, 6, 7, 8, 9, 10, 11, 12, 13, 25, 26, 27, 28, 87, 90, 94], "size": [5, 6, 7, 8, 9, 10, 11, 12, 13, 26, 27, 28, 59, 64, 67, 68, 90, 94, 110, 113, 114], "must": [5, 19, 28, 34, 43, 44, 50, 81, 104, 129, 159], "power": 5, "2": [5, 9, 11, 28, 42, 97, 123, 165], "4": [5, 8, 11, 27, 28, 43, 96], "8": [5, 13, 28, 44], "16": [5, 8, 28], "32": [5, 10], "64": [5, 12], "128": [5, 7], "__init__": [5, 25, 40, 56, 64, 73, 87, 95, 110, 119, 135, 141, 147, 149, 151, 153, 160], "arg": [5, 25, 40, 73, 95, 119], "kwd": [5, 25, 40, 73, 95, 119], "method": [5, 25, 40, 56, 64, 73, 87, 95, 110, 119, 135, 141, 147, 149, 151, 153, 160, 162, 165], "attribut": [5, 25, 40, 59, 73, 90, 95, 119, 153], "0": [6, 14, 26, 29, 45, 56, 64, 75, 76, 87, 90, 94, 99, 110, 122, 124, 135, 141, 157, 160, 165], "A": [6, 7, 8, 9, 10, 11, 12, 13, 26, 28, 56, 60, 61, 64, 67, 69, 70, 87, 91, 92, 110, 113, 115, 116, 135, 139, 141, 144, 147, 149, 151, 153, 155, 156, 157, 160, 165], "7": 7, "5": 10, "6": [12, 16, 31, 47, 78, 101, 126], "return": [14, 17, 19, 21, 24, 29, 32, 34, 36, 39, 45, 48, 50, 52, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 76, 79, 81, 83, 86, 88, 89, 90, 91, 92, 93, 94, 99, 102, 104, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 127, 129, 131, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 150, 152, 154, 155, 156, 157, 158, 159], "pair": [14, 29, 45, 76, 99, 124], "integ": [14, 19, 24, 29, 34, 39, 45, 50, 55, 76, 81, 86, 99, 104, 109, 124, 129, 134, 162, 165], "whose": [14, 29, 45, 76, 99, 124], "ratio": [14, 29, 45, 76, 99, 124], "equal": [14, 29, 45, 76, 99, 124], "int": [14, 17, 29, 32, 45, 48, 56, 59, 60, 61, 63, 64, 67, 68, 69, 70, 72, 76, 79, 87, 90, 91, 92, 94, 99, 102, 110, 113, 114, 115, 116, 118, 124, 127, 135, 139, 141, 144, 147, 149, 151, 153, 157, 158, 159, 160], "lowest": [14, 18, 22, 28, 29, 33, 37, 45, 49, 53, 76, 80, 84, 99, 103, 107, 124, 128, 132], "term": [14, 18, 22, 29, 33, 37, 45, 49, 53, 76, 80, 84, 99, 103, 107, 124, 128, 132], "ha": [14, 29, 45, 76, 99, 121, 122, 123, 124, 146, 162], "posit": [14, 29, 45, 76, 99, 124], "denomin": [14, 29, 45, 76, 99, 124], "10": [14, 29, 45, 76, 99, 124], "ones": [15, 30, 46, 77, 100, 125, 165], "binari": [15, 16, 30, 31, 46, 47, 77, 78, 100, 101, 125, 126], "represent": [15, 24, 30, 39, 46, 55, 77, 86, 100, 109, 125, 134], "absolut": [15, 30, 46, 77, 100, 125], "self": [15, 16, 17, 30, 31, 32, 46, 47, 48, 77, 78, 79, 100, 101, 102, 125, 126, 127], "also": [15, 30, 46, 59, 77, 90, 100, 125, 162, 165], "known": [15, 30, 46, 77, 100, 125], "popul": [15, 30, 46, 77, 100, 125], "count": [15, 30, 46, 77, 100, 125], "bin": [15, 16, 30, 31, 46, 47, 77, 78, 100, 101, 125, 126], "13": [15, 30, 46, 77, 100, 125], "0b1101": [15, 30, 46, 77, 100, 125], "bit": [16, 31, 40, 41, 42, 43, 44, 47, 64, 78, 90, 94, 96, 101, 110, 126, 135, 141, 147, 149, 151], "repres": [16, 19, 24, 31, 34, 39, 47, 50, 55, 78, 81, 86, 101, 104, 109, 126, 129, 134], "37": [16, 31, 47, 78, 101, 126], "0b100101": [16, 31, 47, 78, 101, 126], "complex": [17, 20, 23, 32, 35, 38, 48, 51, 54, 79, 82, 85, 102, 105, 108, 127, 130, 133], "ani": [17, 28, 32, 41, 48, 79, 102, 127], "ration": [18, 22, 33, 37, 49, 53, 80, 84, 103, 107, 128, 132], "byteord": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "big": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "sign": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "fals": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134, 157, 160], "arrai": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "hold": [19, 34, 50, 81, 104, 129, 158], "convert": [19, 34, 50, 81, 104, 129, 159], "argument": [19, 34, 50, 81, 104, 129], "support": [19, 34, 50, 73, 81, 104, 129], "buffer": [19, 34, 41, 50, 81, 90, 104, 129], "protocol": [19, 34, 50, 81, 104, 129], "an": [19, 24, 27, 28, 34, 39, 50, 55, 56, 64, 81, 86, 87, 90, 104, 109, 110, 120, 121, 122, 123, 129, 134, 135, 138, 141, 146, 147, 149, 151, 153, 159, 160, 162, 165], "iter": [19, 34, 50, 60, 61, 69, 70, 81, 91, 92, 104, 115, 116, 129, 139, 144], "object": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134, 146, 155, 156, 165], "produc": [19, 34, 50, 81, 104, 129], "bytearrai": [19, 34, 50, 81, 104, 129], "order": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134, 157, 160], "If": [19, 24, 34, 39, 50, 55, 62, 71, 81, 86, 93, 96, 104, 109, 117, 129, 134, 140, 145, 162, 165], "most": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "signific": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "begin": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "littl": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134, 165], "end": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "To": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "request": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "nativ": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "host": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "system": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "sy": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "default": [19, 24, 34, 39, 50, 55, 81, 86, 90, 104, 109, 129, 134, 165], "indic": [19, 34, 50, 81, 104, 120, 121, 122, 129], "whether": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "two": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "complement": [19, 24, 34, 39, 50, 55, 81, 86, 104, 109, 129, 134], "imaginari": [20, 35, 51, 82, 105, 130], "part": [20, 23, 35, 38, 51, 54, 82, 85, 105, 108, 130, 133], "true": [21, 36, 52, 83, 106, 131], "exist": [21, 36, 52, 83, 106, 131], "duck": [21, 36, 52, 83, 106, 131], "compat": [21, 36, 52, 83, 106, 131], "float": [21, 36, 52, 83, 106, 131], "length": [24, 28, 39, 55, 59, 67, 68, 86, 87, 90, 109, 113, 114, 134, 151], "overflowerror": [24, 39, 55, 86, 109, 134], "rais": [24, 39, 55, 62, 71, 86, 93, 109, 117, 134, 140, 145, 157, 160], "determin": [24, 39, 55, 86, 109, 134, 159], "neg": [24, 39, 55, 86, 109, 134], "dure": 25, "In": [26, 27, 73], "address": [26, 27, 28, 59, 63, 67, 68, 72, 90, 94, 113, 114, 118, 120], "same": [26, 28], "everi": [26, 165], "lane": [26, 60, 61, 69, 70, 91, 92, 115, 116], "valid": 26, "constant": 26, "beat": 26, "howev": [26, 28, 162], "those": [26, 162], "actual": 26, "thave": 26, "wstrb": 26, "assert": [26, 41, 42, 43, 44, 96, 165], "can": [26, 28, 41, 42, 95, 122, 157, 160, 162, 165], "differ": [26, 40], "increment": [27, 28, 162], "tranfer": 27, "previou": 27, "inceremnnt": 27, "depend": [27, 163], "For": 27, "align": [27, 28], "trasnfer": 27, "plu": 27, "four": 27, "similar": 28, "except": [28, 157, 160], "lower": 28, "upper": 28, "limit": 28, "reach": [28, 41, 123], "follow": 28, "restrict": 28, "appli": 28, "behavior": 28, "total": 28, "adat": 28, "x": 28, "defin": [28, 162], "after": [28, 162, 165], "wai": 28, "incr": [28, 90, 94], "incer": 28, "round": 28, "first": [28, 165], "higher": 28, "than": 28, "subject": 28, "when": [28, 41, 42, 43, 44, 123, 146, 159, 162, 165], "cach": [28, 90, 94], "access": [28, 73, 74, 75, 96, 97, 98, 121, 122, 123], "axcach": 40, "signal": [40, 56, 60, 61, 64, 69, 70, 73, 87, 90, 91, 92, 94, 95, 110, 115, 116, 119, 135, 139, 141, 144, 153, 162, 165], "specifi": [40, 73], "bufferabel": 40, "modifi": [40, 42], "alloc": [40, 43, 44], "interconnect": [41, 120], "delai": 41, "its": [41, 162, 165], "final": [41, 162, 165], "destin": 41, "cycl": [41, 87], "characterist": 42, "read": [43, 60, 67, 69, 91, 113, 115, 121, 162], "recomend": [43, 44], "mandatori": [43, 44], "m": [43, 44, 159], "deassert": [43, 44], "bus_prefix": [56, 64, 87, 110, 135, 141], "clk": [56, 62, 64, 71, 87, 93, 110, 117, 135, 140, 141, 145, 153, 165], "rst": [56, 62, 64, 71, 87, 93, 110, 117, 135, 140, 141, 145, 153, 165], "reset_active_level": [56, 64, 87, 110, 135, 141, 153, 165], "wrapper": [56, 64, 87, 110, 135, 141, 162], "lite": [56, 57, 58, 62, 64, 65, 66, 71, 161], "master": [56, 57, 58, 88, 89], "paramet": [56, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 87, 90, 91, 92, 93, 94, 110, 113, 114, 115, 116, 117, 118, 135, 139, 140, 141, 144, 145, 146, 147, 149, 151, 153, 157, 158, 159, 160], "str": [56, 64, 67, 87, 110, 113, 135, 141, 153, 154, 157, 158, 159, 160], "initi": [56, 64, 87, 110, 135, 141, 147, 149, 151, 153, 160, 165], "instanc": [56, 64, 87, 110, 135, 141, 147, 149, 151, 153, 160, 162], "prefix": [56, 64, 67, 87, 110, 113, 135, 141], "belong": [56, 64, 87, 110, 135, 141], "bu": [56, 60, 61, 64, 69, 70, 87, 91, 92, 110, 115, 116, 135, 139, 141, 144], "clock": [56, 64, 87, 110, 135, 141, 153, 159, 162, 165], "reset": [56, 64, 87, 110, 135, 141, 153, 162, 165], "activ": [56, 64, 87, 110, 135, 141, 153, 165], "high": [56, 64, 87, 110, 135, 141, 153, 165], "low": [56, 60, 61, 64, 69, 70, 87, 91, 92, 110, 115, 116, 135, 139, 141, 144, 153, 165], "interfac": [57, 58, 88, 89, 161], "async": [59, 63, 90, 94, 138, 146, 158, 165], "prot": [59, 63, 90, 94], "axiprot": [59, 63, 90, 94], "nonsecur": [59, 63, 90, 94], "from": [59, 68, 90, 114, 163], "protect": [59, 63, 90, 94, 95], "flag": [59, 60, 61, 63, 69, 70, 90, 91, 92, 94, 115, 116, 139, 144, 161], "respons": [59, 63, 90, 94, 119], "oper": [59, 63, 90, 94], "contain": [59, 62, 71, 90, 93, 117, 140, 145, 165], "axilitereadresp": 59, "toggl": [60, 61, 69, 70, 91, 92, 115, 116, 139, 144], "paus": [60, 61, 69, 70, 91, 92, 115, 116, 139, 144], "function": [60, 61, 69, 70, 91, 92, 115, 116, 139, 144, 155, 156, 157, 160, 162, 165], "treadi": [60, 61, 69, 70, 91, 92, 115, 116, 139, 144], "yield": [60, 61, 69, 70, 91, 92, 115, 116, 139, 144], "dut": [62, 71, 93, 117, 140, 145, 158, 159, 162, 165], "hierarchyobject": [62, 71, 93, 117, 140, 145, 155, 156, 157, 158, 159, 160], "devic": [62, 71, 93, 117, 140, 145, 153, 154, 158, 159], "under": [62, 71, 93, 117, 140, 145, 153, 154, 158, 159], "test": [62, 71, 93, 117, 140, 145, 153, 154, 157, 158, 159, 160, 161, 162], "attributeerror": [62, 71, 93, 117, 140, 145], "doe": [62, 71, 73, 93, 117, 140, 145], "handl": [62, 71, 93, 117, 140, 145], "axilitewriteresp": 63, "ram": [64, 65, 66, 67, 68, 71, 110, 111, 112, 113, 114, 117], "tdata_width_bit": [64, 110, 135, 141], "width": [64, 110, 135, 141, 147, 149, 151], "tdata": [64, 110, 135, 141], "memori": [64, 110], "dump": [67, 113], "content": [67, 68, 113, 114], "stdout": [67, 113], "output": [67, 113], "lock": [73, 90, 94], "axi3": 73, "axi4": 73, "axlock": 73, "normal": [73, 90, 94, 122], "exclus": [73, 121], "max_burst_length": 87, "256": 87, "maximum": 87, "id": [90, 94, 162, 165], "axibursttyp": [90, 94], "burst_siz": [90, 94], "axilocktyp": [90, 94], "axicachebit": [90, 94], "qo": [90, 94], "region": [90, 94], "user": [90, 94, 162], "wuser": [90, 94], "assign": 90, "axibursts": [90, 94], "enabl": 90, "qualiti": [90, 94], "servic": [90, 94], "field": [90, 94], "axireadresp": 90, "axiwriteresp": 94, "permiss": 95, "against": 95, "illeg": 95, "non": 97, "secur": 97, "decod": 120, "error": [120, 123], "typic": 120, "subordin": [120, 123], "okai": 121, "been": [121, 122, 146, 165], "success": [121, 122], "laso": 122, "theat": 122, "aexclusi": 122, "fail": [122, 157, 160], "successfulli": 123, "wish": 123, "condit": [123, 165], "manag": 123, "stream": [135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 161], "sink": [135, 136, 137, 140], "frame": [138, 146, 151], "frame_data": 146, "event": 146, "await": [146, 155, 156, 157, 160, 165], "complet": 146, "transmiss": 146, "get": [146, 148, 150, 152, 154, 162], "trigger": 146, "transmit": 146, "data_width_bit": [147, 149, 151], "give": [147, 149, 151], "back": [147, 149, 151], "random": [147, 148, 149, 150, 151, 152], "payload": [147, 148, 149, 150, 151, 152], "frame_length": 151, "cocotb": [153, 162], "els": 153, "properti": [154, 165], "decor": [155, 156, 157, 162, 165], "callabl": [155, 156, 157, 160], "teardown": [156, 162, 165], "timeout_tim": [157, 160], "timeout_unit": [157, 160], "step": [157, 159, 160], "expect_fail": [157, 160], "expect_error": [157, 160], "skip": [157, 160], "stage": [157, 160], "regist": [157, 160, 162, 165], "durat": [157, 160], "timeout": [157, 160], "occur": [157, 160], "unit": [157, 158, 159, 160, 165], "time": [157, 158, 160, 165], "bool": [157, 160], "don": [157, 160], "t": [157, 160], "mark": [157, 160], "tupl": [157, 160], "pass": [157, 160], "onli": [157, 160], "logic": [157, 160], "where": [157, 160], "multipl": [157, 160], "share": [157, 160], "period": [159, 165], "even": 159, "timestep": 159, "One": 159, "f": 159, "p": 159, "n": [159, 165], "u": 159, "sec": 159, "simul": 159, "see": 159, "cocotb_hdl_timeprecis": 159, "test_funct": 160, "test_id": [160, 162, 165], "singl": 160, "intend": 160, "directli": 160, "instead": [160, 163], "register_test": [160, 162, 165], "identifi": [160, 162], "releas": 161, "date": 161, "mar": 161, "2025": 161, "testbench": 161, "entiti": 161, "index": 161, "helper": 162, "usabl": 162, "featur": 162, "want": [162, 165], "learn": 162, "how": 162, "one": [162, 165], "guid": 162, "conveni": 162, "api": 162, "insid": 162, "we": [162, 165], "rather": 162, "sever": 162, "advantag": 162, "over": 162, "tradit": 162, "approach": 162, "besid": 162, "register_setup": [162, 165], "register_teardown": [162, 165], "execut": [162, 165], "addition": [162, 165], "so": 162, "own": 162, "look": 162, "wave": [162, 165], "file": [162, 163, 165], "start_clock": 162, "usual": [162, 165], "call": [162, 165], "notabl": 163, "chang": 163, "allow": [163, 165], "improv": 163, "readm": 163, "md": 163, "do": [163, 165], "adjust": 163, "link": 163, "gh": 163, "page": 163, "replac": 163, "old": 163, "repo": 163, "updat": 163, "workflow": 163, "github": 163, "runner": 163, "git": 163, "cliff": 163, "remov": 163, "footnot": 163, "citat": 163, "format": 163, "plugin": 163, "export": 163, "sphinx": 163, "publish": 163, "ownership": 163, "hpmm": 163, "flake": 163, "quickstart": 164, "facilit": 165, "more": 165, "detail": 165, "avail": 165, "here": 165, "import": 165, "ctw": 165, "lot": 165, "less": 165, "verbos": 165, "new": 165, "some": 165, "basic": 165, "inform": 165, "tb": 165, "adder": 165, "clk_i": 165, "rst_ni": 165, "main": 165, "e": 165, "our": 165, "requir": 165, "procedur": 165, "perform": 165, "def": 165, "start_clk": 165, "additionali": 165, "driven": 165, "manual": 165, "show": 165, "abov": 165, "test_add": 165, "stuff": 165, "until": 165, "addit": 165, "preferr": 165, "distinguish": 165, "easili": 165, "sinc": 165, "sequenti": 165}, "objects": {"cocotb_wrapper.axi": [[5, 0, 1, "", "AxiBurstSize"], [25, 0, 1, "", "AxiBurstType"], [40, 0, 1, "", "AxiCacheBit"], [56, 0, 1, "", "AxiLiteMaster"], [64, 0, 1, "", "AxiLiteRam"], [73, 0, 1, "", "AxiLockType"], [87, 0, 1, "", "AxiMaster"], [95, 0, 1, "", "AxiProt"], [110, 0, 1, "", "AxiRam"], [119, 0, 1, "", "AxiResp"], [135, 0, 1, "", "AxiStreamSink"], [141, 0, 1, "", "AxiStreamSource"], [147, 0, 1, "", "RandomAxiLitePayloadGenerator"], [149, 0, 1, "", "RandomAxiPayloadGenerator"], [151, 0, 1, "", "RandomAxiStreamPayloadGenerator"]], "cocotb_wrapper.axi.AxiBurstSize": [[6, 1, 1, "", "SIZE_1"], [7, 1, 1, "", "SIZE_128"], [8, 1, 1, "", "SIZE_16"], [9, 1, 1, "", "SIZE_2"], [10, 1, 1, "", "SIZE_32"], [11, 1, 1, "", "SIZE_4"], [12, 1, 1, "", "SIZE_64"], [13, 1, 1, "", "SIZE_8"], [5, 2, 1, "", "__init__"], [14, 2, 1, "", "as_integer_ratio"], [15, 2, 1, "", "bit_count"], [16, 2, 1, "", "bit_length"], [17, 2, 1, "", "conjugate"], [18, 1, 1, "", "denominator"], [19, 2, 1, "", "from_bytes"], [20, 1, 1, "", "imag"], [21, 2, 1, "", "is_integer"], [22, 1, 1, "", "numerator"], [23, 1, 1, "", "real"], [24, 2, 1, "", "to_bytes"]], "cocotb_wrapper.axi.AxiBurstType": [[26, 1, 1, "", "FIXED"], [27, 1, 1, "", "INCR"], [28, 1, 1, "", "WRAP"], [25, 2, 1, "", "__init__"], [29, 2, 1, "", "as_integer_ratio"], [30, 2, 1, "", "bit_count"], [31, 2, 1, "", "bit_length"], [32, 2, 1, "", "conjugate"], [33, 1, 1, "", "denominator"], [34, 2, 1, "", "from_bytes"], [35, 1, 1, "", "imag"], [36, 2, 1, "", "is_integer"], [37, 1, 1, "", "numerator"], [38, 1, 1, "", "real"], [39, 2, 1, "", "to_bytes"]], "cocotb_wrapper.axi.AxiCacheBit": [[41, 1, 1, "", "B"], [42, 1, 1, "", "M"], [43, 1, 1, "", "RA"], [44, 1, 1, "", "WA"], [40, 2, 1, "", "__init__"], [45, 2, 1, "", "as_integer_ratio"], [46, 2, 1, "", "bit_count"], [47, 2, 1, "", "bit_length"], [48, 2, 1, "", "conjugate"], [49, 1, 1, "", "denominator"], [50, 2, 1, "", "from_bytes"], [51, 1, 1, "", "imag"], [52, 2, 1, "", "is_integer"], [53, 1, 1, "", "numerator"], [54, 1, 1, "", "real"], [55, 2, 1, "", "to_bytes"]], "cocotb_wrapper.axi.AxiLiteMaster": [[56, 2, 1, "", "__init__"], [57, 2, 1, "", "disable"], [58, 2, 1, "", "enable"], [59, 2, 1, "", "read"], [60, 2, 1, "", "set_backpressure_generator"], [61, 2, 1, "", "set_idle_generator"], [62, 2, 1, "", "setup"], [63, 2, 1, "", "write"]], "cocotb_wrapper.axi.AxiLiteRam": [[64, 2, 1, "", "__init__"], [65, 2, 1, "", "disable"], [66, 2, 1, "", "enable"], [67, 2, 1, "", "hexdump"], [68, 2, 1, "", "read"], [69, 2, 1, "", "set_backpressure_generator"], [70, 2, 1, "", "set_idle_generator"], [71, 2, 1, "", "setup"], [72, 2, 1, "", "write"]], "cocotb_wrapper.axi.AxiLockType": [[74, 1, 1, "", "EXCLUSIVE"], [75, 1, 1, "", "NORMAL"], [73, 2, 1, "", "__init__"], [76, 2, 1, "", "as_integer_ratio"], [77, 2, 1, "", "bit_count"], [78, 2, 1, "", "bit_length"], [79, 2, 1, "", "conjugate"], [80, 1, 1, "", "denominator"], [81, 2, 1, "", "from_bytes"], [82, 1, 1, "", "imag"], [83, 2, 1, "", "is_integer"], [84, 1, 1, "", "numerator"], [85, 1, 1, "", "real"], [86, 2, 1, "", "to_bytes"]], "cocotb_wrapper.axi.AxiMaster": [[87, 2, 1, "", "__init__"], [88, 2, 1, "", "disable"], [89, 2, 1, "", "enable"], [90, 2, 1, "", "read"], [91, 2, 1, "", "set_backpressure_generator"], [92, 2, 1, "", "set_idle_generator"], [93, 2, 1, "", "setup"], [94, 2, 1, "", "write"]], "cocotb_wrapper.axi.AxiProt": [[96, 1, 1, "", "INSTRUCTION"], [97, 1, 1, "", "NONSECURE"], [98, 1, 1, "", "PRIVILEGED"], [95, 2, 1, "", "__init__"], [99, 2, 1, "", "as_integer_ratio"], [100, 2, 1, "", "bit_count"], [101, 2, 1, "", "bit_length"], [102, 2, 1, "", "conjugate"], [103, 1, 1, "", "denominator"], [104, 2, 1, "", "from_bytes"], [105, 1, 1, "", "imag"], [106, 2, 1, "", "is_integer"], [107, 1, 1, "", "numerator"], [108, 1, 1, "", "real"], [109, 2, 1, "", "to_bytes"]], "cocotb_wrapper.axi.AxiRam": [[110, 2, 1, "", "__init__"], [111, 2, 1, "", "disable"], [112, 2, 1, "", "enable"], [113, 2, 1, "", "hexdump"], [114, 2, 1, "", "read"], [115, 2, 1, "", "set_backpressure_generator"], [116, 2, 1, "", "set_idle_generator"], [117, 2, 1, "", "setup"], [118, 2, 1, "", "write"]], "cocotb_wrapper.axi.AxiResp": [[120, 1, 1, "", "DECERR"], [121, 1, 1, "", "EXOKAY"], [122, 1, 1, "", "OKAY"], [123, 1, 1, "", "SLVERR"], [119, 2, 1, "", "__init__"], [124, 2, 1, "", "as_integer_ratio"], [125, 2, 1, "", "bit_count"], [126, 2, 1, "", "bit_length"], [127, 2, 1, "", "conjugate"], [128, 1, 1, "", "denominator"], [129, 2, 1, "", "from_bytes"], [130, 1, 1, "", "imag"], [131, 2, 1, "", "is_integer"], [132, 1, 1, "", "numerator"], [133, 1, 1, "", "real"], [134, 2, 1, "", "to_bytes"]], "cocotb_wrapper.axi.AxiStreamSink": [[135, 2, 1, "", "__init__"], [136, 2, 1, "", "disable"], [137, 2, 1, "", "enable"], [138, 2, 1, "", "read"], [139, 2, 1, "", "set_pause_generator"], [140, 2, 1, "", "setup"]], "cocotb_wrapper.axi.AxiStreamSource": [[141, 2, 1, "", "__init__"], [142, 2, 1, "", "disable"], [143, 2, 1, "", "enable"], [144, 2, 1, "", "set_pause_generator"], [145, 2, 1, "", "setup"], [146, 2, 1, "", "write"]], "cocotb_wrapper.axi.RandomAxiLitePayloadGenerator": [[147, 2, 1, "", "__init__"], [148, 2, 1, "", "get_payload"]], "cocotb_wrapper.axi.RandomAxiPayloadGenerator": [[149, 2, 1, "", "__init__"], [150, 2, 1, "", "get_payload"]], "cocotb_wrapper.axi.RandomAxiStreamPayloadGenerator": [[151, 2, 1, "", "__init__"], [152, 2, 1, "", "get_payload"]], "cocotb_wrapper.testbench": [[153, 0, 1, "", "Testbench"], [160, 0, 1, "", "_Test"]], "cocotb_wrapper.testbench.Testbench": [[153, 2, 1, "", "__init__"], [154, 3, 1, "", "name"], [155, 2, 1, "", "register_setup"], [156, 2, 1, "", "register_teardown"], [157, 2, 1, "", "register_test"], [158, 2, 1, "", "reset"], [159, 2, 1, "", "start_clk"]], "cocotb_wrapper.testbench._Test": [[160, 2, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:attribute", "2": "py:method", "3": "py:property"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "attribute", "Python attribute"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"]}, "titleterms": {"cocotb": [0, 3, 161, 164, 165], "wrapper": [0, 3, 161, 164, 165], "develop": [0, 1], "guid": [0, 164], "setup": [1, 62, 71, 93, 117, 140, 145], "todo": [2, 56, 64, 87, 110, 135, 141, 147, 149, 151], "welcom": 3, "document": [3, 163, 165], "test": [4, 165], "entiti": 4, "axi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152], "interfac": 4, "lite": 4, "stream": 4, "flag": 4, "cocotb_wrapp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160], "axibursts": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "size_1": 6, "size_128": 7, "size_16": 8, "size_2": 9, "size_32": 10, "size_4": 11, "size_64": 12, "size_8": 13, "as_integer_ratio": [14, 29, 45, 76, 99, 124], "bit_count": [15, 30, 46, 77, 100, 125], "bit_length": [16, 31, 47, 78, 101, 126], "conjug": [17, 32, 48, 79, 102, 127], "denomin": [18, 33, 49, 80, 103, 128], "from_byt": [19, 34, 50, 81, 104, 129], "imag": [20, 35, 51, 82, 105, 130], "is_integ": [21, 36, 52, 83, 106, 131], "numer": [22, 37, 53, 84, 107, 132], "real": [23, 38, 54, 85, 108, 133], "to_byt": [24, 39, 55, 86, 109, 134], "axibursttyp": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "fix": [26, 163], "incr": 27, "wrap": 28, "axicachebit": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "b": 41, "m": 42, "ra": 43, "wa": 44, "axilitemast": [56, 57, 58, 59, 60, 61, 62, 63], "disabl": [57, 65, 88, 111, 136, 142], "enabl": [58, 66, 89, 112, 137, 143], "read": [59, 68, 90, 114, 138], "set_backpressure_gener": [60, 69, 91, 115], "set_idle_gener": [61, 70, 92, 116], "write": [63, 72, 94, 118, 146, 165], "axiliteram": [64, 65, 66, 67, 68, 69, 70, 71, 72], "hexdump": [67, 113], "axilocktyp": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "exclus": 74, "normal": 75, "aximast": [87, 88, 89, 90, 91, 92, 93, 94], "axiprot": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "instruct": 96, "nonsecur": 97, "privileg": 98, "axiram": [110, 111, 112, 113, 114, 115, 116, 117, 118], "axiresp": [119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "decerr": 120, "exokai": 121, "okai": 122, "slverr": 123, "axistreamsink": [135, 136, 137, 138, 139, 140], "set_pause_gener": [139, 144], "axistreamsourc": [141, 142, 143, 144, 145, 146], "randomaxilitepayloadgener": [147, 148], "get_payload": [148, 150, 152], "randomaxipayloadgener": [149, 150], "randomaxistreampayloadgener": [151, 152], "testbench": [153, 154, 155, 156, 157, 158, 159, 160, 162, 165], "name": 154, "register_setup": 155, "register_teardown": 156, "register_test": 157, "reset": 158, "start_clk": 159, "_test": 160, "refer": 161, "indic": 161, "tabl": 161, "creat": 162, "releas": 163, "note": 163, "changelog": 163, "1": 163, "2": 163, "2024": 163, "03": 163, "19": 163, "featur": 163, "miscellan": 163, "task": 163, "12": 163, "0": 163, "02": 163, "bug": 163, "user": 164, "get": 164, "start": 164, "quickstart": 165, "us": 165}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"cocotb-wrapper Development Guide": [[0, "cocotb-wrapper-development-guide"]], "Development": [[0, null]], "Development Setup": [[1, "development-setup"]], "TODOs": [[2, "todos"]], "Todo": [[2, null], [2, null], [2, null], [2, null], [2, null], [2, null], [2, null], [2, null], [2, null], [56, "id1"], [64, "id1"], [87, "id1"], [110, "id1"], [135, "id1"], [141, "id1"], [147, "id1"], [149, "id1"], [151, "id1"]], "Welcome to the cocotb-wrapper documentation!": [[3, "welcome-to-the-cocotb-wrapper-documentation"]], "Testing entities with AXI interfaces": [[4, "testing-entities-with-axi-interfaces"]], "AXI": [[4, "axi"]], "AXI-Lite": [[4, "axi-lite"]], "AXI-Stream": [[4, "axi-stream"]], "AXI Flags": [[4, "axi-flags"]], "cocotb_wrapper.axi.AxiBurstSize": [[5, "cocotb-wrapper-axi-axiburstsize"]], "cocotb_wrapper.axi.AxiBurstSize.SIZE_1": [[6, "cocotb-wrapper-axi-axiburstsize-size-1"]], "cocotb_wrapper.axi.AxiBurstSize.SIZE_128": [[7, "cocotb-wrapper-axi-axiburstsize-size-128"]], "cocotb_wrapper.axi.AxiBurstSize.SIZE_16": [[8, "cocotb-wrapper-axi-axiburstsize-size-16"]], "cocotb_wrapper.axi.AxiBurstSize.SIZE_2": [[9, "cocotb-wrapper-axi-axiburstsize-size-2"]], "cocotb_wrapper.axi.AxiBurstSize.SIZE_32": [[10, "cocotb-wrapper-axi-axiburstsize-size-32"]], "cocotb_wrapper.axi.AxiBurstSize.SIZE_4": [[11, "cocotb-wrapper-axi-axiburstsize-size-4"]], "cocotb_wrapper.axi.AxiBurstSize.SIZE_64": [[12, "cocotb-wrapper-axi-axiburstsize-size-64"]], "cocotb_wrapper.axi.AxiBurstSize.SIZE_8": [[13, "cocotb-wrapper-axi-axiburstsize-size-8"]], "cocotb_wrapper.axi.AxiBurstSize.as_integer_ratio": [[14, "cocotb-wrapper-axi-axiburstsize-as-integer-ratio"]], "cocotb_wrapper.axi.AxiBurstSize.bit_count": [[15, "cocotb-wrapper-axi-axiburstsize-bit-count"]], "cocotb_wrapper.axi.AxiBurstSize.bit_length": [[16, "cocotb-wrapper-axi-axiburstsize-bit-length"]], "cocotb_wrapper.axi.AxiBurstSize.conjugate": [[17, "cocotb-wrapper-axi-axiburstsize-conjugate"]], "cocotb_wrapper.axi.AxiBurstSize.denominator": [[18, "cocotb-wrapper-axi-axiburstsize-denominator"]], "cocotb_wrapper.axi.AxiBurstSize.from_bytes": [[19, "cocotb-wrapper-axi-axiburstsize-from-bytes"]], "cocotb_wrapper.axi.AxiBurstSize.imag": [[20, "cocotb-wrapper-axi-axiburstsize-imag"]], "cocotb_wrapper.axi.AxiBurstSize.is_integer": [[21, "cocotb-wrapper-axi-axiburstsize-is-integer"]], "cocotb_wrapper.axi.AxiBurstSize.numerator": [[22, "cocotb-wrapper-axi-axiburstsize-numerator"]], "cocotb_wrapper.axi.AxiBurstSize.real": [[23, "cocotb-wrapper-axi-axiburstsize-real"]], "cocotb_wrapper.axi.AxiBurstSize.to_bytes": [[24, "cocotb-wrapper-axi-axiburstsize-to-bytes"]], "cocotb_wrapper.axi.AxiBurstType": [[25, "cocotb-wrapper-axi-axibursttype"]], "cocotb_wrapper.axi.AxiBurstType.FIXED": [[26, "cocotb-wrapper-axi-axibursttype-fixed"]], "cocotb_wrapper.axi.AxiBurstType.INCR": [[27, "cocotb-wrapper-axi-axibursttype-incr"]], "cocotb_wrapper.axi.AxiBurstType.WRAP": [[28, "cocotb-wrapper-axi-axibursttype-wrap"]], "cocotb_wrapper.axi.AxiBurstType.as_integer_ratio": [[29, "cocotb-wrapper-axi-axibursttype-as-integer-ratio"]], "cocotb_wrapper.axi.AxiBurstType.bit_count": [[30, "cocotb-wrapper-axi-axibursttype-bit-count"]], "cocotb_wrapper.axi.AxiBurstType.bit_length": [[31, "cocotb-wrapper-axi-axibursttype-bit-length"]], "cocotb_wrapper.axi.AxiBurstType.conjugate": [[32, "cocotb-wrapper-axi-axibursttype-conjugate"]], "cocotb_wrapper.axi.AxiBurstType.denominator": [[33, "cocotb-wrapper-axi-axibursttype-denominator"]], "cocotb_wrapper.axi.AxiBurstType.from_bytes": [[34, "cocotb-wrapper-axi-axibursttype-from-bytes"]], "cocotb_wrapper.axi.AxiBurstType.imag": [[35, "cocotb-wrapper-axi-axibursttype-imag"]], "cocotb_wrapper.axi.AxiBurstType.is_integer": [[36, "cocotb-wrapper-axi-axibursttype-is-integer"]], "cocotb_wrapper.axi.AxiBurstType.numerator": [[37, "cocotb-wrapper-axi-axibursttype-numerator"]], "cocotb_wrapper.axi.AxiBurstType.real": [[38, "cocotb-wrapper-axi-axibursttype-real"]], "cocotb_wrapper.axi.AxiBurstType.to_bytes": [[39, "cocotb-wrapper-axi-axibursttype-to-bytes"]], "cocotb_wrapper.axi.AxiCacheBit": [[40, "cocotb-wrapper-axi-axicachebit"]], "cocotb_wrapper.axi.AxiCacheBit.B": [[41, "cocotb-wrapper-axi-axicachebit-b"]], "cocotb_wrapper.axi.AxiCacheBit.M": [[42, "cocotb-wrapper-axi-axicachebit-m"]], "cocotb_wrapper.axi.AxiCacheBit.RA": [[43, "cocotb-wrapper-axi-axicachebit-ra"]], "cocotb_wrapper.axi.AxiCacheBit.WA": [[44, "cocotb-wrapper-axi-axicachebit-wa"]], "cocotb_wrapper.axi.AxiCacheBit.as_integer_ratio": [[45, "cocotb-wrapper-axi-axicachebit-as-integer-ratio"]], "cocotb_wrapper.axi.AxiCacheBit.bit_count": [[46, "cocotb-wrapper-axi-axicachebit-bit-count"]], "cocotb_wrapper.axi.AxiCacheBit.bit_length": [[47, "cocotb-wrapper-axi-axicachebit-bit-length"]], "cocotb_wrapper.axi.AxiCacheBit.conjugate": [[48, "cocotb-wrapper-axi-axicachebit-conjugate"]], "cocotb_wrapper.axi.AxiCacheBit.denominator": [[49, "cocotb-wrapper-axi-axicachebit-denominator"]], "cocotb_wrapper.axi.AxiCacheBit.from_bytes": [[50, "cocotb-wrapper-axi-axicachebit-from-bytes"]], "cocotb_wrapper.axi.AxiCacheBit.imag": [[51, "cocotb-wrapper-axi-axicachebit-imag"]], "cocotb_wrapper.axi.AxiCacheBit.is_integer": [[52, "cocotb-wrapper-axi-axicachebit-is-integer"]], "cocotb_wrapper.axi.AxiCacheBit.numerator": [[53, "cocotb-wrapper-axi-axicachebit-numerator"]], "cocotb_wrapper.axi.AxiCacheBit.real": [[54, "cocotb-wrapper-axi-axicachebit-real"]], "cocotb_wrapper.axi.AxiCacheBit.to_bytes": [[55, "cocotb-wrapper-axi-axicachebit-to-bytes"]], "cocotb_wrapper.axi.AxiLiteMaster": [[56, "cocotb-wrapper-axi-axilitemaster"]], "cocotb_wrapper.axi.AxiLiteMaster.disable": [[57, "cocotb-wrapper-axi-axilitemaster-disable"]], "cocotb_wrapper.axi.AxiLiteMaster.enable": [[58, "cocotb-wrapper-axi-axilitemaster-enable"]], "cocotb_wrapper.axi.AxiLiteMaster.read": [[59, "cocotb-wrapper-axi-axilitemaster-read"]], "cocotb_wrapper.axi.AxiLiteMaster.set_backpressure_generator": [[60, "cocotb-wrapper-axi-axilitemaster-set-backpressure-generator"]], "cocotb_wrapper.axi.AxiLiteMaster.set_idle_generator": [[61, "cocotb-wrapper-axi-axilitemaster-set-idle-generator"]], "cocotb_wrapper.axi.AxiLiteMaster.setup": [[62, "cocotb-wrapper-axi-axilitemaster-setup"]], "cocotb_wrapper.axi.AxiLiteMaster.write": [[63, "cocotb-wrapper-axi-axilitemaster-write"]], "cocotb_wrapper.axi.AxiLiteRam": [[64, "cocotb-wrapper-axi-axiliteram"]], "cocotb_wrapper.axi.AxiLiteRam.disable": [[65, "cocotb-wrapper-axi-axiliteram-disable"]], "cocotb_wrapper.axi.AxiLiteRam.enable": [[66, "cocotb-wrapper-axi-axiliteram-enable"]], "cocotb_wrapper.axi.AxiLiteRam.hexdump": [[67, "cocotb-wrapper-axi-axiliteram-hexdump"]], "cocotb_wrapper.axi.AxiLiteRam.read": [[68, "cocotb-wrapper-axi-axiliteram-read"]], "cocotb_wrapper.axi.AxiLiteRam.set_backpressure_generator": [[69, "cocotb-wrapper-axi-axiliteram-set-backpressure-generator"]], "cocotb_wrapper.axi.AxiLiteRam.set_idle_generator": [[70, "cocotb-wrapper-axi-axiliteram-set-idle-generator"]], "cocotb_wrapper.axi.AxiLiteRam.setup": [[71, "cocotb-wrapper-axi-axiliteram-setup"]], "cocotb_wrapper.axi.AxiLiteRam.write": [[72, "cocotb-wrapper-axi-axiliteram-write"]], "cocotb_wrapper.axi.AxiLockType": [[73, "cocotb-wrapper-axi-axilocktype"]], "cocotb_wrapper.axi.AxiLockType.EXCLUSIVE": [[74, "cocotb-wrapper-axi-axilocktype-exclusive"]], "cocotb_wrapper.axi.AxiLockType.NORMAL": [[75, "cocotb-wrapper-axi-axilocktype-normal"]], "cocotb_wrapper.axi.AxiLockType.as_integer_ratio": [[76, "cocotb-wrapper-axi-axilocktype-as-integer-ratio"]], "cocotb_wrapper.axi.AxiLockType.bit_count": [[77, "cocotb-wrapper-axi-axilocktype-bit-count"]], "cocotb_wrapper.axi.AxiLockType.bit_length": [[78, "cocotb-wrapper-axi-axilocktype-bit-length"]], "cocotb_wrapper.axi.AxiLockType.conjugate": [[79, "cocotb-wrapper-axi-axilocktype-conjugate"]], "cocotb_wrapper.axi.AxiLockType.denominator": [[80, "cocotb-wrapper-axi-axilocktype-denominator"]], "cocotb_wrapper.axi.AxiLockType.from_bytes": [[81, "cocotb-wrapper-axi-axilocktype-from-bytes"]], "cocotb_wrapper.axi.AxiLockType.imag": [[82, "cocotb-wrapper-axi-axilocktype-imag"]], "cocotb_wrapper.axi.AxiLockType.is_integer": [[83, "cocotb-wrapper-axi-axilocktype-is-integer"]], "cocotb_wrapper.axi.AxiLockType.numerator": [[84, "cocotb-wrapper-axi-axilocktype-numerator"]], "cocotb_wrapper.axi.AxiLockType.real": [[85, "cocotb-wrapper-axi-axilocktype-real"]], "cocotb_wrapper.axi.AxiLockType.to_bytes": [[86, "cocotb-wrapper-axi-axilocktype-to-bytes"]], "cocotb_wrapper.axi.AxiMaster": [[87, "cocotb-wrapper-axi-aximaster"]], "cocotb_wrapper.axi.AxiMaster.disable": [[88, "cocotb-wrapper-axi-aximaster-disable"]], "cocotb_wrapper.axi.AxiMaster.enable": [[89, "cocotb-wrapper-axi-aximaster-enable"]], "cocotb_wrapper.axi.AxiMaster.read": [[90, "cocotb-wrapper-axi-aximaster-read"]], "cocotb_wrapper.axi.AxiMaster.set_backpressure_generator": [[91, "cocotb-wrapper-axi-aximaster-set-backpressure-generator"]], "cocotb_wrapper.axi.AxiMaster.set_idle_generator": [[92, "cocotb-wrapper-axi-aximaster-set-idle-generator"]], "cocotb_wrapper.axi.AxiMaster.setup": [[93, "cocotb-wrapper-axi-aximaster-setup"]], "cocotb_wrapper.axi.AxiMaster.write": [[94, "cocotb-wrapper-axi-aximaster-write"]], "cocotb_wrapper.axi.AxiProt": [[95, "cocotb-wrapper-axi-axiprot"]], "cocotb_wrapper.axi.AxiProt.INSTRUCTION": [[96, "cocotb-wrapper-axi-axiprot-instruction"]], "cocotb_wrapper.axi.AxiProt.NONSECURE": [[97, "cocotb-wrapper-axi-axiprot-nonsecure"]], "cocotb_wrapper.axi.AxiProt.PRIVILEGED": [[98, "cocotb-wrapper-axi-axiprot-privileged"]], "cocotb_wrapper.axi.AxiProt.as_integer_ratio": [[99, "cocotb-wrapper-axi-axiprot-as-integer-ratio"]], "cocotb_wrapper.axi.AxiProt.bit_count": [[100, "cocotb-wrapper-axi-axiprot-bit-count"]], "cocotb_wrapper.axi.AxiProt.bit_length": [[101, "cocotb-wrapper-axi-axiprot-bit-length"]], "cocotb_wrapper.axi.AxiProt.conjugate": [[102, "cocotb-wrapper-axi-axiprot-conjugate"]], "cocotb_wrapper.axi.AxiProt.denominator": [[103, "cocotb-wrapper-axi-axiprot-denominator"]], "cocotb_wrapper.axi.AxiProt.from_bytes": [[104, "cocotb-wrapper-axi-axiprot-from-bytes"]], "cocotb_wrapper.axi.AxiProt.imag": [[105, "cocotb-wrapper-axi-axiprot-imag"]], "cocotb_wrapper.axi.AxiProt.is_integer": [[106, "cocotb-wrapper-axi-axiprot-is-integer"]], "cocotb_wrapper.axi.AxiProt.numerator": [[107, "cocotb-wrapper-axi-axiprot-numerator"]], "cocotb_wrapper.axi.AxiProt.real": [[108, "cocotb-wrapper-axi-axiprot-real"]], "cocotb_wrapper.axi.AxiProt.to_bytes": [[109, "cocotb-wrapper-axi-axiprot-to-bytes"]], "cocotb_wrapper.axi.AxiRam": [[110, "cocotb-wrapper-axi-axiram"]], "cocotb_wrapper.axi.AxiRam.disable": [[111, "cocotb-wrapper-axi-axiram-disable"]], "cocotb_wrapper.axi.AxiRam.enable": [[112, "cocotb-wrapper-axi-axiram-enable"]], "cocotb_wrapper.axi.AxiRam.hexdump": [[113, "cocotb-wrapper-axi-axiram-hexdump"]], "cocotb_wrapper.axi.AxiRam.read": [[114, "cocotb-wrapper-axi-axiram-read"]], "cocotb_wrapper.axi.AxiRam.set_backpressure_generator": [[115, "cocotb-wrapper-axi-axiram-set-backpressure-generator"]], "cocotb_wrapper.axi.AxiRam.set_idle_generator": [[116, "cocotb-wrapper-axi-axiram-set-idle-generator"]], "cocotb_wrapper.axi.AxiRam.setup": [[117, "cocotb-wrapper-axi-axiram-setup"]], "cocotb_wrapper.axi.AxiRam.write": [[118, "cocotb-wrapper-axi-axiram-write"]], "cocotb_wrapper.axi.AxiResp": [[119, "cocotb-wrapper-axi-axiresp"]], "cocotb_wrapper.axi.AxiResp.DECERR": [[120, "cocotb-wrapper-axi-axiresp-decerr"]], "cocotb_wrapper.axi.AxiResp.EXOKAY": [[121, "cocotb-wrapper-axi-axiresp-exokay"]], "cocotb_wrapper.axi.AxiResp.OKAY": [[122, "cocotb-wrapper-axi-axiresp-okay"]], "cocotb_wrapper.axi.AxiResp.SLVERR": [[123, "cocotb-wrapper-axi-axiresp-slverr"]], "cocotb_wrapper.axi.AxiResp.as_integer_ratio": [[124, "cocotb-wrapper-axi-axiresp-as-integer-ratio"]], "cocotb_wrapper.axi.AxiResp.bit_count": [[125, "cocotb-wrapper-axi-axiresp-bit-count"]], "cocotb_wrapper.axi.AxiResp.bit_length": [[126, "cocotb-wrapper-axi-axiresp-bit-length"]], "cocotb_wrapper.axi.AxiResp.conjugate": [[127, "cocotb-wrapper-axi-axiresp-conjugate"]], "cocotb_wrapper.axi.AxiResp.denominator": [[128, "cocotb-wrapper-axi-axiresp-denominator"]], "cocotb_wrapper.axi.AxiResp.from_bytes": [[129, "cocotb-wrapper-axi-axiresp-from-bytes"]], "cocotb_wrapper.axi.AxiResp.imag": [[130, "cocotb-wrapper-axi-axiresp-imag"]], "cocotb_wrapper.axi.AxiResp.is_integer": [[131, "cocotb-wrapper-axi-axiresp-is-integer"]], "cocotb_wrapper.axi.AxiResp.numerator": [[132, "cocotb-wrapper-axi-axiresp-numerator"]], "cocotb_wrapper.axi.AxiResp.real": [[133, "cocotb-wrapper-axi-axiresp-real"]], "cocotb_wrapper.axi.AxiResp.to_bytes": [[134, "cocotb-wrapper-axi-axiresp-to-bytes"]], "cocotb_wrapper.axi.AxiStreamSink": [[135, "cocotb-wrapper-axi-axistreamsink"]], "cocotb_wrapper.axi.AxiStreamSink.disable": [[136, "cocotb-wrapper-axi-axistreamsink-disable"]], "cocotb_wrapper.axi.AxiStreamSink.enable": [[137, "cocotb-wrapper-axi-axistreamsink-enable"]], "cocotb_wrapper.axi.AxiStreamSink.read": [[138, "cocotb-wrapper-axi-axistreamsink-read"]], "cocotb_wrapper.axi.AxiStreamSink.set_pause_generator": [[139, "cocotb-wrapper-axi-axistreamsink-set-pause-generator"]], "cocotb_wrapper.axi.AxiStreamSink.setup": [[140, "cocotb-wrapper-axi-axistreamsink-setup"]], "cocotb_wrapper.axi.AxiStreamSource": [[141, "cocotb-wrapper-axi-axistreamsource"]], "cocotb_wrapper.axi.AxiStreamSource.disable": [[142, "cocotb-wrapper-axi-axistreamsource-disable"]], "cocotb_wrapper.axi.AxiStreamSource.enable": [[143, "cocotb-wrapper-axi-axistreamsource-enable"]], "cocotb_wrapper.axi.AxiStreamSource.set_pause_generator": [[144, "cocotb-wrapper-axi-axistreamsource-set-pause-generator"]], "cocotb_wrapper.axi.AxiStreamSource.setup": [[145, "cocotb-wrapper-axi-axistreamsource-setup"]], "cocotb_wrapper.axi.AxiStreamSource.write": [[146, "cocotb-wrapper-axi-axistreamsource-write"]], "cocotb_wrapper.axi.RandomAxiLitePayloadGenerator": [[147, "cocotb-wrapper-axi-randomaxilitepayloadgenerator"]], "cocotb_wrapper.axi.RandomAxiLitePayloadGenerator.get_payload": [[148, "cocotb-wrapper-axi-randomaxilitepayloadgenerator-get-payload"]], "cocotb_wrapper.axi.RandomAxiPayloadGenerator": [[149, "cocotb-wrapper-axi-randomaxipayloadgenerator"]], "cocotb_wrapper.axi.RandomAxiPayloadGenerator.get_payload": [[150, "cocotb-wrapper-axi-randomaxipayloadgenerator-get-payload"]], "cocotb_wrapper.axi.RandomAxiStreamPayloadGenerator": [[151, "cocotb-wrapper-axi-randomaxistreampayloadgenerator"]], "cocotb_wrapper.axi.RandomAxiStreamPayloadGenerator.get_payload": [[152, "cocotb-wrapper-axi-randomaxistreampayloadgenerator-get-payload"]], "cocotb_wrapper.testbench.Testbench": [[153, "cocotb-wrapper-testbench-testbench"]], "cocotb_wrapper.testbench.Testbench.name": [[154, "cocotb-wrapper-testbench-testbench-name"]], "cocotb_wrapper.testbench.Testbench.register_setup": [[155, "cocotb-wrapper-testbench-testbench-register-setup"]], "cocotb_wrapper.testbench.Testbench.register_teardown": [[156, "cocotb-wrapper-testbench-testbench-register-teardown"]], "cocotb_wrapper.testbench.Testbench.register_test": [[157, "cocotb-wrapper-testbench-testbench-register-test"]], "cocotb_wrapper.testbench.Testbench.reset": [[158, "cocotb-wrapper-testbench-testbench-reset"]], "cocotb_wrapper.testbench.Testbench.start_clk": [[159, "cocotb-wrapper-testbench-testbench-start-clk"]], "cocotb_wrapper.testbench._Test": [[160, "cocotb-wrapper-testbench-test"]], "cocotb-wrapper Reference": [[161, "cocotb-wrapper-reference"]], "Indices and tables": [[161, "indices-and-tables"]], "Testbench": [[162, "testbench"]], "Creating a testbench": [[162, "creating-a-testbench"]], "Release notes": [[163, "release-notes"]], "Changelog": [[163, "changelog"]], "[1.1.2] - 2024-03-19": [[163, "id1"]], "\ud83d\ude80 Features": [[163, "features"]], "\ud83d\udcda Documentation": [[163, "documentation"], [163, "id3"], [163, "id6"]], "\u2699\ufe0f Miscellaneous Tasks": [[163, "miscellaneous-tasks"], [163, "id4"], [163, "id7"]], "[1.1.1] - 2024-03-12": [[163, "id2"]], "[1.1.0] - 2024-03-02": [[163, "id5"]], "\ud83d\udc1b Bug Fixes": [[163, "bug-fixes"]], "cocotb-wrapper User Guide": [[164, "cocotb-wrapper-user-guide"]], "Getting started": [[164, null]], "Quickstart": [[165, "quickstart"]], "cocotb-wrapper": [[165, "cocotb-wrapper"]], "Documentation": [[165, "documentation"]], "Writing tests using Testbench": [[165, "writing-tests-using-testbench"]]}, "indexentries": {"axiburstsize (class in cocotb_wrapper.axi)": [[5, "cocotb_wrapper.axi.AxiBurstSize"]], "__init__() (cocotb_wrapper.axi.axiburstsize method)": [[5, "cocotb_wrapper.axi.AxiBurstSize.__init__"]], "size_1 (cocotb_wrapper.axi.axiburstsize attribute)": [[6, "cocotb_wrapper.axi.AxiBurstSize.SIZE_1"]], "size_128 (cocotb_wrapper.axi.axiburstsize attribute)": [[7, "cocotb_wrapper.axi.AxiBurstSize.SIZE_128"]], "size_16 (cocotb_wrapper.axi.axiburstsize attribute)": [[8, "cocotb_wrapper.axi.AxiBurstSize.SIZE_16"]], "size_2 (cocotb_wrapper.axi.axiburstsize attribute)": [[9, "cocotb_wrapper.axi.AxiBurstSize.SIZE_2"]], "size_32 (cocotb_wrapper.axi.axiburstsize attribute)": [[10, "cocotb_wrapper.axi.AxiBurstSize.SIZE_32"]], "size_4 (cocotb_wrapper.axi.axiburstsize attribute)": [[11, "cocotb_wrapper.axi.AxiBurstSize.SIZE_4"]], "size_64 (cocotb_wrapper.axi.axiburstsize attribute)": [[12, "cocotb_wrapper.axi.AxiBurstSize.SIZE_64"]], "size_8 (cocotb_wrapper.axi.axiburstsize attribute)": [[13, "cocotb_wrapper.axi.AxiBurstSize.SIZE_8"]], "as_integer_ratio() (cocotb_wrapper.axi.axiburstsize method)": [[14, "cocotb_wrapper.axi.AxiBurstSize.as_integer_ratio"]], "bit_count() (cocotb_wrapper.axi.axiburstsize method)": [[15, "cocotb_wrapper.axi.AxiBurstSize.bit_count"]], "bit_length() (cocotb_wrapper.axi.axiburstsize method)": [[16, "cocotb_wrapper.axi.AxiBurstSize.bit_length"]], "conjugate() (cocotb_wrapper.axi.axiburstsize method)": [[17, "cocotb_wrapper.axi.AxiBurstSize.conjugate"]], "denominator (cocotb_wrapper.axi.axiburstsize attribute)": [[18, "cocotb_wrapper.axi.AxiBurstSize.denominator"]], "from_bytes() (cocotb_wrapper.axi.axiburstsize method)": [[19, "cocotb_wrapper.axi.AxiBurstSize.from_bytes"]], "imag (cocotb_wrapper.axi.axiburstsize attribute)": [[20, "cocotb_wrapper.axi.AxiBurstSize.imag"]], "is_integer() (cocotb_wrapper.axi.axiburstsize method)": [[21, "cocotb_wrapper.axi.AxiBurstSize.is_integer"]], "numerator (cocotb_wrapper.axi.axiburstsize attribute)": [[22, "cocotb_wrapper.axi.AxiBurstSize.numerator"]], "real (cocotb_wrapper.axi.axiburstsize attribute)": [[23, "cocotb_wrapper.axi.AxiBurstSize.real"]], "to_bytes() (cocotb_wrapper.axi.axiburstsize method)": [[24, "cocotb_wrapper.axi.AxiBurstSize.to_bytes"]], "axibursttype (class in cocotb_wrapper.axi)": [[25, "cocotb_wrapper.axi.AxiBurstType"]], "__init__() (cocotb_wrapper.axi.axibursttype method)": [[25, "cocotb_wrapper.axi.AxiBurstType.__init__"]], "fixed (cocotb_wrapper.axi.axibursttype attribute)": [[26, "cocotb_wrapper.axi.AxiBurstType.FIXED"]], "incr (cocotb_wrapper.axi.axibursttype attribute)": [[27, "cocotb_wrapper.axi.AxiBurstType.INCR"]], "wrap (cocotb_wrapper.axi.axibursttype attribute)": [[28, "cocotb_wrapper.axi.AxiBurstType.WRAP"]], "as_integer_ratio() (cocotb_wrapper.axi.axibursttype method)": [[29, "cocotb_wrapper.axi.AxiBurstType.as_integer_ratio"]], "bit_count() (cocotb_wrapper.axi.axibursttype method)": [[30, "cocotb_wrapper.axi.AxiBurstType.bit_count"]], "bit_length() (cocotb_wrapper.axi.axibursttype method)": [[31, "cocotb_wrapper.axi.AxiBurstType.bit_length"]], "conjugate() (cocotb_wrapper.axi.axibursttype method)": [[32, "cocotb_wrapper.axi.AxiBurstType.conjugate"]], "denominator (cocotb_wrapper.axi.axibursttype attribute)": [[33, "cocotb_wrapper.axi.AxiBurstType.denominator"]], "from_bytes() (cocotb_wrapper.axi.axibursttype method)": [[34, "cocotb_wrapper.axi.AxiBurstType.from_bytes"]], "imag (cocotb_wrapper.axi.axibursttype attribute)": [[35, "cocotb_wrapper.axi.AxiBurstType.imag"]], "is_integer() (cocotb_wrapper.axi.axibursttype method)": [[36, "cocotb_wrapper.axi.AxiBurstType.is_integer"]], "numerator (cocotb_wrapper.axi.axibursttype attribute)": [[37, "cocotb_wrapper.axi.AxiBurstType.numerator"]], "real (cocotb_wrapper.axi.axibursttype attribute)": [[38, "cocotb_wrapper.axi.AxiBurstType.real"]], "to_bytes() (cocotb_wrapper.axi.axibursttype method)": [[39, "cocotb_wrapper.axi.AxiBurstType.to_bytes"]], "axicachebit (class in cocotb_wrapper.axi)": [[40, "cocotb_wrapper.axi.AxiCacheBit"]], "__init__() (cocotb_wrapper.axi.axicachebit method)": [[40, "cocotb_wrapper.axi.AxiCacheBit.__init__"]], "b (cocotb_wrapper.axi.axicachebit attribute)": [[41, "cocotb_wrapper.axi.AxiCacheBit.B"]], "m (cocotb_wrapper.axi.axicachebit attribute)": [[42, "cocotb_wrapper.axi.AxiCacheBit.M"]], "ra (cocotb_wrapper.axi.axicachebit attribute)": [[43, "cocotb_wrapper.axi.AxiCacheBit.RA"]], "wa (cocotb_wrapper.axi.axicachebit attribute)": [[44, "cocotb_wrapper.axi.AxiCacheBit.WA"]], "as_integer_ratio() (cocotb_wrapper.axi.axicachebit method)": [[45, "cocotb_wrapper.axi.AxiCacheBit.as_integer_ratio"]], "bit_count() (cocotb_wrapper.axi.axicachebit method)": [[46, "cocotb_wrapper.axi.AxiCacheBit.bit_count"]], "bit_length() (cocotb_wrapper.axi.axicachebit method)": [[47, "cocotb_wrapper.axi.AxiCacheBit.bit_length"]], "conjugate() (cocotb_wrapper.axi.axicachebit method)": [[48, "cocotb_wrapper.axi.AxiCacheBit.conjugate"]], "denominator (cocotb_wrapper.axi.axicachebit attribute)": [[49, "cocotb_wrapper.axi.AxiCacheBit.denominator"]], "from_bytes() (cocotb_wrapper.axi.axicachebit method)": [[50, "cocotb_wrapper.axi.AxiCacheBit.from_bytes"]], "imag (cocotb_wrapper.axi.axicachebit attribute)": [[51, "cocotb_wrapper.axi.AxiCacheBit.imag"]], "is_integer() (cocotb_wrapper.axi.axicachebit method)": [[52, "cocotb_wrapper.axi.AxiCacheBit.is_integer"]], "numerator (cocotb_wrapper.axi.axicachebit attribute)": [[53, "cocotb_wrapper.axi.AxiCacheBit.numerator"]], "real (cocotb_wrapper.axi.axicachebit attribute)": [[54, "cocotb_wrapper.axi.AxiCacheBit.real"]], "to_bytes() (cocotb_wrapper.axi.axicachebit method)": [[55, "cocotb_wrapper.axi.AxiCacheBit.to_bytes"]], "axilitemaster (class in cocotb_wrapper.axi)": [[56, "cocotb_wrapper.axi.AxiLiteMaster"]], "__init__() (cocotb_wrapper.axi.axilitemaster method)": [[56, "cocotb_wrapper.axi.AxiLiteMaster.__init__"]], "disable() (cocotb_wrapper.axi.axilitemaster method)": [[57, "cocotb_wrapper.axi.AxiLiteMaster.disable"]], "enable() (cocotb_wrapper.axi.axilitemaster method)": [[58, "cocotb_wrapper.axi.AxiLiteMaster.enable"]], "read() (cocotb_wrapper.axi.axilitemaster method)": [[59, "cocotb_wrapper.axi.AxiLiteMaster.read"]], "set_backpressure_generator() (cocotb_wrapper.axi.axilitemaster method)": [[60, "cocotb_wrapper.axi.AxiLiteMaster.set_backpressure_generator"]], "set_idle_generator() (cocotb_wrapper.axi.axilitemaster method)": [[61, "cocotb_wrapper.axi.AxiLiteMaster.set_idle_generator"]], "setup() (cocotb_wrapper.axi.axilitemaster method)": [[62, "cocotb_wrapper.axi.AxiLiteMaster.setup"]], "write() (cocotb_wrapper.axi.axilitemaster method)": [[63, "cocotb_wrapper.axi.AxiLiteMaster.write"]], "axiliteram (class in cocotb_wrapper.axi)": [[64, "cocotb_wrapper.axi.AxiLiteRam"]], "__init__() (cocotb_wrapper.axi.axiliteram method)": [[64, "cocotb_wrapper.axi.AxiLiteRam.__init__"]], "disable() (cocotb_wrapper.axi.axiliteram method)": [[65, "cocotb_wrapper.axi.AxiLiteRam.disable"]], "enable() (cocotb_wrapper.axi.axiliteram method)": [[66, "cocotb_wrapper.axi.AxiLiteRam.enable"]], "hexdump() (cocotb_wrapper.axi.axiliteram method)": [[67, "cocotb_wrapper.axi.AxiLiteRam.hexdump"]], "read() (cocotb_wrapper.axi.axiliteram method)": [[68, "cocotb_wrapper.axi.AxiLiteRam.read"]], "set_backpressure_generator() (cocotb_wrapper.axi.axiliteram method)": [[69, "cocotb_wrapper.axi.AxiLiteRam.set_backpressure_generator"]], "set_idle_generator() (cocotb_wrapper.axi.axiliteram method)": [[70, "cocotb_wrapper.axi.AxiLiteRam.set_idle_generator"]], "setup() (cocotb_wrapper.axi.axiliteram method)": [[71, "cocotb_wrapper.axi.AxiLiteRam.setup"]], "write() (cocotb_wrapper.axi.axiliteram method)": [[72, "cocotb_wrapper.axi.AxiLiteRam.write"]], "axilocktype (class in cocotb_wrapper.axi)": [[73, "cocotb_wrapper.axi.AxiLockType"]], "__init__() (cocotb_wrapper.axi.axilocktype method)": [[73, "cocotb_wrapper.axi.AxiLockType.__init__"]], "exclusive (cocotb_wrapper.axi.axilocktype attribute)": [[74, "cocotb_wrapper.axi.AxiLockType.EXCLUSIVE"]], "normal (cocotb_wrapper.axi.axilocktype attribute)": [[75, "cocotb_wrapper.axi.AxiLockType.NORMAL"]], "as_integer_ratio() (cocotb_wrapper.axi.axilocktype method)": [[76, "cocotb_wrapper.axi.AxiLockType.as_integer_ratio"]], "bit_count() (cocotb_wrapper.axi.axilocktype method)": [[77, "cocotb_wrapper.axi.AxiLockType.bit_count"]], "bit_length() (cocotb_wrapper.axi.axilocktype method)": [[78, "cocotb_wrapper.axi.AxiLockType.bit_length"]], "conjugate() (cocotb_wrapper.axi.axilocktype method)": [[79, "cocotb_wrapper.axi.AxiLockType.conjugate"]], "denominator (cocotb_wrapper.axi.axilocktype attribute)": [[80, "cocotb_wrapper.axi.AxiLockType.denominator"]], "from_bytes() (cocotb_wrapper.axi.axilocktype method)": [[81, "cocotb_wrapper.axi.AxiLockType.from_bytes"]], "imag (cocotb_wrapper.axi.axilocktype attribute)": [[82, "cocotb_wrapper.axi.AxiLockType.imag"]], "is_integer() (cocotb_wrapper.axi.axilocktype method)": [[83, "cocotb_wrapper.axi.AxiLockType.is_integer"]], "numerator (cocotb_wrapper.axi.axilocktype attribute)": [[84, "cocotb_wrapper.axi.AxiLockType.numerator"]], "real (cocotb_wrapper.axi.axilocktype attribute)": [[85, "cocotb_wrapper.axi.AxiLockType.real"]], "to_bytes() (cocotb_wrapper.axi.axilocktype method)": [[86, "cocotb_wrapper.axi.AxiLockType.to_bytes"]], "aximaster (class in cocotb_wrapper.axi)": [[87, "cocotb_wrapper.axi.AxiMaster"]], "__init__() (cocotb_wrapper.axi.aximaster method)": [[87, "cocotb_wrapper.axi.AxiMaster.__init__"]], "disable() (cocotb_wrapper.axi.aximaster method)": [[88, "cocotb_wrapper.axi.AxiMaster.disable"]], "enable() (cocotb_wrapper.axi.aximaster method)": [[89, "cocotb_wrapper.axi.AxiMaster.enable"]], "read() (cocotb_wrapper.axi.aximaster method)": [[90, "cocotb_wrapper.axi.AxiMaster.read"]], "set_backpressure_generator() (cocotb_wrapper.axi.aximaster method)": [[91, "cocotb_wrapper.axi.AxiMaster.set_backpressure_generator"]], "set_idle_generator() (cocotb_wrapper.axi.aximaster method)": [[92, "cocotb_wrapper.axi.AxiMaster.set_idle_generator"]], "setup() (cocotb_wrapper.axi.aximaster method)": [[93, "cocotb_wrapper.axi.AxiMaster.setup"]], "write() (cocotb_wrapper.axi.aximaster method)": [[94, "cocotb_wrapper.axi.AxiMaster.write"]], "axiprot (class in cocotb_wrapper.axi)": [[95, "cocotb_wrapper.axi.AxiProt"]], "__init__() (cocotb_wrapper.axi.axiprot method)": [[95, "cocotb_wrapper.axi.AxiProt.__init__"]], "instruction (cocotb_wrapper.axi.axiprot attribute)": [[96, "cocotb_wrapper.axi.AxiProt.INSTRUCTION"]], "nonsecure (cocotb_wrapper.axi.axiprot attribute)": [[97, "cocotb_wrapper.axi.AxiProt.NONSECURE"]], "privileged (cocotb_wrapper.axi.axiprot attribute)": [[98, "cocotb_wrapper.axi.AxiProt.PRIVILEGED"]], "as_integer_ratio() (cocotb_wrapper.axi.axiprot method)": [[99, "cocotb_wrapper.axi.AxiProt.as_integer_ratio"]], "bit_count() (cocotb_wrapper.axi.axiprot method)": [[100, "cocotb_wrapper.axi.AxiProt.bit_count"]], "bit_length() (cocotb_wrapper.axi.axiprot method)": [[101, "cocotb_wrapper.axi.AxiProt.bit_length"]], "conjugate() (cocotb_wrapper.axi.axiprot method)": [[102, "cocotb_wrapper.axi.AxiProt.conjugate"]], "denominator (cocotb_wrapper.axi.axiprot attribute)": [[103, "cocotb_wrapper.axi.AxiProt.denominator"]], "from_bytes() (cocotb_wrapper.axi.axiprot method)": [[104, "cocotb_wrapper.axi.AxiProt.from_bytes"]], "imag (cocotb_wrapper.axi.axiprot attribute)": [[105, "cocotb_wrapper.axi.AxiProt.imag"]], "is_integer() (cocotb_wrapper.axi.axiprot method)": [[106, "cocotb_wrapper.axi.AxiProt.is_integer"]], "numerator (cocotb_wrapper.axi.axiprot attribute)": [[107, "cocotb_wrapper.axi.AxiProt.numerator"]], "real (cocotb_wrapper.axi.axiprot attribute)": [[108, "cocotb_wrapper.axi.AxiProt.real"]], "to_bytes() (cocotb_wrapper.axi.axiprot method)": [[109, "cocotb_wrapper.axi.AxiProt.to_bytes"]], "axiram (class in cocotb_wrapper.axi)": [[110, "cocotb_wrapper.axi.AxiRam"]], "__init__() (cocotb_wrapper.axi.axiram method)": [[110, "cocotb_wrapper.axi.AxiRam.__init__"]], "disable() (cocotb_wrapper.axi.axiram method)": [[111, "cocotb_wrapper.axi.AxiRam.disable"]], "enable() (cocotb_wrapper.axi.axiram method)": [[112, "cocotb_wrapper.axi.AxiRam.enable"]], "hexdump() (cocotb_wrapper.axi.axiram method)": [[113, "cocotb_wrapper.axi.AxiRam.hexdump"]], "read() (cocotb_wrapper.axi.axiram method)": [[114, "cocotb_wrapper.axi.AxiRam.read"]], "set_backpressure_generator() (cocotb_wrapper.axi.axiram method)": [[115, "cocotb_wrapper.axi.AxiRam.set_backpressure_generator"]], "set_idle_generator() (cocotb_wrapper.axi.axiram method)": [[116, "cocotb_wrapper.axi.AxiRam.set_idle_generator"]], "setup() (cocotb_wrapper.axi.axiram method)": [[117, "cocotb_wrapper.axi.AxiRam.setup"]], "write() (cocotb_wrapper.axi.axiram method)": [[118, "cocotb_wrapper.axi.AxiRam.write"]], "axiresp (class in cocotb_wrapper.axi)": [[119, "cocotb_wrapper.axi.AxiResp"]], "__init__() (cocotb_wrapper.axi.axiresp method)": [[119, "cocotb_wrapper.axi.AxiResp.__init__"]], "decerr (cocotb_wrapper.axi.axiresp attribute)": [[120, "cocotb_wrapper.axi.AxiResp.DECERR"]], "exokay (cocotb_wrapper.axi.axiresp attribute)": [[121, "cocotb_wrapper.axi.AxiResp.EXOKAY"]], "okay (cocotb_wrapper.axi.axiresp attribute)": [[122, "cocotb_wrapper.axi.AxiResp.OKAY"]], "slverr (cocotb_wrapper.axi.axiresp attribute)": [[123, "cocotb_wrapper.axi.AxiResp.SLVERR"]], "as_integer_ratio() (cocotb_wrapper.axi.axiresp method)": [[124, "cocotb_wrapper.axi.AxiResp.as_integer_ratio"]], "bit_count() (cocotb_wrapper.axi.axiresp method)": [[125, "cocotb_wrapper.axi.AxiResp.bit_count"]], "bit_length() (cocotb_wrapper.axi.axiresp method)": [[126, "cocotb_wrapper.axi.AxiResp.bit_length"]], "conjugate() (cocotb_wrapper.axi.axiresp method)": [[127, "cocotb_wrapper.axi.AxiResp.conjugate"]], "denominator (cocotb_wrapper.axi.axiresp attribute)": [[128, "cocotb_wrapper.axi.AxiResp.denominator"]], "from_bytes() (cocotb_wrapper.axi.axiresp method)": [[129, "cocotb_wrapper.axi.AxiResp.from_bytes"]], "imag (cocotb_wrapper.axi.axiresp attribute)": [[130, "cocotb_wrapper.axi.AxiResp.imag"]], "is_integer() (cocotb_wrapper.axi.axiresp method)": [[131, "cocotb_wrapper.axi.AxiResp.is_integer"]], "numerator (cocotb_wrapper.axi.axiresp attribute)": [[132, "cocotb_wrapper.axi.AxiResp.numerator"]], "real (cocotb_wrapper.axi.axiresp attribute)": [[133, "cocotb_wrapper.axi.AxiResp.real"]], "to_bytes() (cocotb_wrapper.axi.axiresp method)": [[134, "cocotb_wrapper.axi.AxiResp.to_bytes"]], "axistreamsink (class in cocotb_wrapper.axi)": [[135, "cocotb_wrapper.axi.AxiStreamSink"]], "__init__() (cocotb_wrapper.axi.axistreamsink method)": [[135, "cocotb_wrapper.axi.AxiStreamSink.__init__"]], "disable() (cocotb_wrapper.axi.axistreamsink method)": [[136, "cocotb_wrapper.axi.AxiStreamSink.disable"]], "enable() (cocotb_wrapper.axi.axistreamsink method)": [[137, "cocotb_wrapper.axi.AxiStreamSink.enable"]], "read() (cocotb_wrapper.axi.axistreamsink method)": [[138, "cocotb_wrapper.axi.AxiStreamSink.read"]], "set_pause_generator() (cocotb_wrapper.axi.axistreamsink method)": [[139, "cocotb_wrapper.axi.AxiStreamSink.set_pause_generator"]], "setup() (cocotb_wrapper.axi.axistreamsink method)": [[140, "cocotb_wrapper.axi.AxiStreamSink.setup"]], "axistreamsource (class in cocotb_wrapper.axi)": [[141, "cocotb_wrapper.axi.AxiStreamSource"]], "__init__() (cocotb_wrapper.axi.axistreamsource method)": [[141, "cocotb_wrapper.axi.AxiStreamSource.__init__"]], "disable() (cocotb_wrapper.axi.axistreamsource method)": [[142, "cocotb_wrapper.axi.AxiStreamSource.disable"]], "enable() (cocotb_wrapper.axi.axistreamsource method)": [[143, "cocotb_wrapper.axi.AxiStreamSource.enable"]], "set_pause_generator() (cocotb_wrapper.axi.axistreamsource method)": [[144, "cocotb_wrapper.axi.AxiStreamSource.set_pause_generator"]], "setup() (cocotb_wrapper.axi.axistreamsource method)": [[145, "cocotb_wrapper.axi.AxiStreamSource.setup"]], "write() (cocotb_wrapper.axi.axistreamsource method)": [[146, "cocotb_wrapper.axi.AxiStreamSource.write"]], "randomaxilitepayloadgenerator (class in cocotb_wrapper.axi)": [[147, "cocotb_wrapper.axi.RandomAxiLitePayloadGenerator"]], "__init__() (cocotb_wrapper.axi.randomaxilitepayloadgenerator method)": [[147, "cocotb_wrapper.axi.RandomAxiLitePayloadGenerator.__init__"]], "get_payload() (cocotb_wrapper.axi.randomaxilitepayloadgenerator method)": [[148, "cocotb_wrapper.axi.RandomAxiLitePayloadGenerator.get_payload"]], "randomaxipayloadgenerator (class in cocotb_wrapper.axi)": [[149, "cocotb_wrapper.axi.RandomAxiPayloadGenerator"]], "__init__() (cocotb_wrapper.axi.randomaxipayloadgenerator method)": [[149, "cocotb_wrapper.axi.RandomAxiPayloadGenerator.__init__"]], "get_payload() (cocotb_wrapper.axi.randomaxipayloadgenerator method)": [[150, "cocotb_wrapper.axi.RandomAxiPayloadGenerator.get_payload"]], "randomaxistreampayloadgenerator (class in cocotb_wrapper.axi)": [[151, "cocotb_wrapper.axi.RandomAxiStreamPayloadGenerator"]], "__init__() (cocotb_wrapper.axi.randomaxistreampayloadgenerator method)": [[151, "cocotb_wrapper.axi.RandomAxiStreamPayloadGenerator.__init__"]], "get_payload() (cocotb_wrapper.axi.randomaxistreampayloadgenerator method)": [[152, "cocotb_wrapper.axi.RandomAxiStreamPayloadGenerator.get_payload"]], "testbench (class in cocotb_wrapper.testbench)": [[153, "cocotb_wrapper.testbench.Testbench"]], "__init__() (cocotb_wrapper.testbench.testbench method)": [[153, "cocotb_wrapper.testbench.Testbench.__init__"]], "name (cocotb_wrapper.testbench.testbench property)": [[154, "cocotb_wrapper.testbench.Testbench.name"]], "register_setup() (cocotb_wrapper.testbench.testbench method)": [[155, "cocotb_wrapper.testbench.Testbench.register_setup"]], "register_teardown() (cocotb_wrapper.testbench.testbench method)": [[156, "cocotb_wrapper.testbench.Testbench.register_teardown"]], "register_test() (cocotb_wrapper.testbench.testbench method)": [[157, "cocotb_wrapper.testbench.Testbench.register_test"]], "reset() (cocotb_wrapper.testbench.testbench method)": [[158, "cocotb_wrapper.testbench.Testbench.reset"]], "start_clk() (cocotb_wrapper.testbench.testbench method)": [[159, "cocotb_wrapper.testbench.Testbench.start_clk"]], "_test (class in cocotb_wrapper.testbench)": [[160, "cocotb_wrapper.testbench._Test"]], "__init__() (cocotb_wrapper.testbench._test method)": [[160, "cocotb_wrapper.testbench._Test.__init__"]]}})