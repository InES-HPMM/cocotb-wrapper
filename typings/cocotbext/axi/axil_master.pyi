"""This type stub file was generated by pyright."""

from typing import NamedTuple

from cocotb.triggers import Event

from .address_space import Region
from .constants import AxiProt, AxiResp
from .reset import Reset

"""

Copyright (c) 2020 Alex Forencich

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

"""

class AxiLiteWriteCmd(NamedTuple):
    address: int
    data: bytes
    prot: AxiProt
    event: Event
    ...

class AxiLiteWriteRespCmd(NamedTuple):
    address: int
    length: int
    cycles: int
    prot: AxiProt
    event: Event
    ...

class AxiLiteWriteResp(NamedTuple):
    address: int
    length: int
    resp: AxiResp
    ...

class AxiLiteReadCmd(NamedTuple):
    address: int
    length: int
    prot: AxiProt
    event: Event
    ...

class AxiLiteReadRespCmd(NamedTuple):
    address: int
    length: int
    cycles: int
    prot: AxiProt
    event: Event
    ...

class AxiLiteReadResp(NamedTuple):
    address: int
    data: bytes
    resp: AxiResp
    def __bytes__(self):  # -> bytes:
        ...

class AxiLiteMasterWrite(Region, Reset):
    def __init__(
        self, bus, clock, reset=..., reset_active_level=..., **kwargs
    ) -> None: ...
    def init_write(self, address, data, prot=..., event=...):  # -> Event:
        ...
    def idle(self):  # -> bool:
        ...
    async def wait(self):  # -> None:
        ...
    async def write(self, address, data, prot=...): ...

class AxiLiteMasterRead(Region, Reset):
    def __init__(
        self, bus, clock, reset=..., reset_active_level=..., **kwargs
    ) -> None: ...
    def init_read(self, address, length, prot=..., event=...):  # -> Event:
        ...
    def idle(self):  # -> bool:
        ...
    async def wait(self):  # -> None:
        ...
    async def read(self, address, length, prot=...): ...

class AxiLiteMaster(Region):
    def __init__(
        self, bus, clock, reset=..., reset_active_level=..., **kwargs
    ) -> None: ...
    def init_read(self, address, length, prot=..., event=...):  # -> Event:
        ...
    def init_write(self, address, data, prot=..., event=...):  # -> Event:
        ...
    def idle(self):  # -> bool:
        ...
    async def wait(self):  # -> None:
        ...
    async def wait_read(self):  # -> None:
        ...
    async def wait_write(self):  # -> None:
        ...
    async def read(self, address, length, prot=...): ...
    async def write(self, address, data, prot=...): ...
