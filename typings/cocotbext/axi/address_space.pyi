"""This type stub file was generated by pyright."""

"""

Copyright (c) 2021 Alex Forencich

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

"""

class MemoryInterface:
    def __init__(self, size, base=..., parent=..., **kwargs) -> None: ...
    @property
    def parent(self):  # -> None:
        ...
    @property
    def size(self):  # -> Any:
        ...
    @property
    def base(self):  # -> int:
        ...
    def check_range(self, address, length=...):  # -> None:
        ...
    def get_absolute_address(self, address):  # -> None:
        ...
    async def read(self, address, length, **kwargs): ...
    async def read_words(
        self, address, count, byteorder=..., ws=..., **kwargs
    ):  # -> list[Any]:
        ...
    async def read_dwords(
        self, address, count, byteorder=..., **kwargs
    ):  # -> list[Any]:
        ...
    async def read_qwords(
        self, address, count, byteorder=..., **kwargs
    ):  # -> list[Any]:
        ...
    async def read_byte(self, address, **kwargs): ...
    async def read_word(self, address, byteorder=..., ws=..., **kwargs): ...
    async def read_dword(self, address, byteorder=..., **kwargs): ...
    async def read_qword(self, address, byteorder=..., **kwargs): ...
    async def write(self, address, data, **kwargs):  # -> None:
        ...
    async def write_words(
        self, address, data, byteorder=..., ws=..., **kwargs
    ):  # -> None:
        ...
    async def write_dwords(
        self, address, data, byteorder=..., **kwargs
    ):  # -> None:
        ...
    async def write_qwords(
        self, address, data, byteorder=..., **kwargs
    ):  # -> None:
        ...
    async def write_byte(self, address, data, **kwargs):  # -> None:
        ...
    async def write_word(
        self, address, data, byteorder=..., ws=..., **kwargs
    ):  # -> None:
        ...
    async def write_dword(
        self, address, data, byteorder=..., **kwargs
    ):  # -> None:
        ...
    async def write_qword(
        self, address, data, byteorder=..., **kwargs
    ):  # -> None:
        ...
    def create_window(self, offset, size=..., window_type=...):  # -> Window:
        ...
    def create_window_pool(
        self, offset=..., size=..., window_pool_type=..., window_type=...
    ):  # -> WindowPool:
        ...
    def __len__(self):  # -> Any:
        ...

class Window(MemoryInterface):
    def __init__(self, parent, offset, size, base=..., **kwargs) -> None: ...
    @property
    def offset(self):  # -> Any:
        ...
    def get_parent_address(self, address): ...

class WindowPool(Window):
    def __init__(
        self, parent, offset, size, base=..., window_type=..., **kwargs
    ) -> None: ...
    def alloc_window(self, size, window_type=...):  # -> Window:
        ...

class Region(MemoryInterface):
    def __init__(self, size, **kwargs) -> None: ...

class MemoryRegion(Region):
    def __init__(self, size=..., mem=..., **kwargs) -> None: ...
    def hexdump(self, address, length, prefix=...):  # -> None:
        ...
    def hexdump_lines(self, address, length, prefix=...):  # -> list[Any]:
        ...
    def hexdump_str(self, address, length, prefix=...):  # -> LiteralString:
        ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value):  # -> None:
        ...
    def __bytes__(self):  # -> bytes:
        ...

class SparseMemoryRegion(Region):
    def __init__(self, size=..., mem=..., **kwargs) -> None: ...
    def hexdump(self, address, length, prefix=...):  # -> None:
        ...
    def hexdump_lines(self, address, length, prefix=...):  # -> list[Any]:
        ...
    def hexdump_str(self, address, length, prefix=...):  # -> LiteralString:
        ...
    def __getitem__(self, key):  # -> int | bytes | None:
        ...
    def __setitem__(self, key, value):  # -> None:
        ...

class PeripheralRegion(Region):
    def __init__(self, obj, size, **kwargs) -> None: ...

class AddressSpace(Region):
    def __init__(self, size=..., base=..., parent=..., **kwargs) -> None: ...
    def find_regions(self, address, length=...):  # -> list[Any]:
        ...
    def register_region(self, region, base, size=..., offset=...):  # -> None:
        ...
    async def read(self, address, length, **kwargs):  # -> bytes:
        ...
    async def write(self, address, data, **kwargs):  # -> None:
        ...
    def create_pool(
        self, base=..., size=..., pool_type=..., region_type=...
    ):  # -> Pool:
        ...

class Pool(AddressSpace):
    def __init__(
        self, parent, base, size, region_type=..., **kwargs
    ) -> None: ...
    def alloc_region(self, size, region_type=...):  # -> MemoryRegion:
        ...
