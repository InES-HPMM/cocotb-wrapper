"""This type stub file was generated by pyright."""

from cocotb.decorators import coroutine

"""Class defining the standard interface for a monitor within a testbench.

The monitor is responsible for watching the pins of the DUT and recreating
the transactions.
"""

class MonitorStatistics:
    """Wrapper class for storing Monitor statistics"""
    def __init__(self) -> None: ...

class Monitor:
    """Base class for Monitor objects.

    Monitors are passive 'listening' objects that monitor pins going in or out of a DUT.
    This class should not be used directly,
    but should be sub-classed and the internal :meth:`_monitor_recv` method should be overridden.
    This :meth:`_monitor_recv` method should capture some behavior of the pins, form a transaction,
    and pass this transaction to the internal :meth:`_recv` method.
    The :meth:`_monitor_recv` method is added to the cocotb scheduler during the ``__init__`` phase,
    so it should not be awaited anywhere.

    The primary use of a Monitor is as an interface for a :class:`~cocotb.scoreboard.Scoreboard`.

    Args:
        callback (callable): Callback to be called with each recovered transaction
            as the argument. If the callback isn't used, received transactions will
            be placed on a queue and the event used to notify any consumers.
        event (cocotb.triggers.Event): Event that will be called when a transaction
            is received through the internal :meth:`_recv` method.
            `Event.data` is set to the received transaction.
    """
    def __init__(self, callback=..., event=...) -> None: ...
    def kill(self):  # -> None:
        """Kill the monitor coroutine."""
        ...

    def __len__(self):  # -> int:
        ...
    def __getitem__(self, idx): ...
    def add_callback(self, callback):  # -> None:
        """Add function as a callback.

        Args:
            callback (callable): The function to call back.
        """
        ...

    @coroutine
    async def wait_for_recv(self, timeout=...):  # -> None:
        """With *timeout*, :meth:`.wait` for transaction to arrive on monitor
        and return its data.

        Args:
            timeout: The timeout value for :class:`~.triggers.Timer`.
                Defaults to ``None``.

        Returns:
            Data of received transaction.
        """
        ...

class BusMonitor(Monitor):
    """Wrapper providing common functionality for monitoring buses."""

    _signals = ...
    _optional_signals = ...
    def __init__(
        self,
        entity,
        name,
        clock,
        reset=...,
        reset_n=...,
        callback=...,
        event=...,
        **kwargs,
    ) -> None: ...
    @property
    def in_reset(self):  # -> bool:
        """Boolean flag showing whether the bus is in reset state or not."""
        ...

    def __str__(self) -> str: ...
