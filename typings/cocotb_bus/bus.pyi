"""This type stub file was generated by pyright."""

"""Common bus related functionality.
A bus is simply defined as a collection of signals.
"""

class Bus:
    """Wraps up a collection of signals.

    Assumes we have a set of signals/nets named ``entity.<bus_name><separator><signal>``.

    For example a bus ``stream_in`` with signals ``valid`` and ``data`` is assumed
    to be named ``dut.stream_in_valid`` and ``dut.stream_in_data`` (with
    the default separator '_').

    Todo:
        Support for ``struct``/``record`` ports where signals are member names.
    """
    def __init__(
        self,
        entity,
        name,
        signals,
        optional_signals=...,
        bus_separator=...,
        case_insensitive=...,
        array_idx=...,
    ) -> None:
        """Args:
        entity (SimHandle): :any:`SimHandle` instance to the entity containing the bus.
        name (str): Name of the bus. ``None`` for a nameless bus, e.g. bus-signals
            in an interface or a ``modport`` (untested on ``struct``/``record``,
            but could work here as well).
        signals (list or dict): In the case of an object (passed to :func:`drive`/:func:`capture`)
            that has the same attribute names as the signal names of the bus,
            the *signals* argument can be a list of those names.
            When the object has different attribute names, the *signals* argument should be
            a dict that maps bus attribute names to object signal names.
        optional_signals (list or dict, optional): Signals that don't have to be present
            on the interface.
            See the *signals* argument above for details.
        bus_separator (str, optional): Character(s) to use as separator between bus
            name and signal name. Defaults to '_'.
        case_insensitive (bool, optional): Perform case-insensitive match on signal names.
            Defaults to True.
        array_idx (int or None, optional): Optional index when signal is an array.
        """
        ...

    def drive(self, obj, strict=...):  # -> None:
        """Drives values onto the bus.

        Args:
            obj: Object with attribute names that match the bus signals.
            strict (bool, optional): Check that all signals are being assigned.

        Raises:
            AttributeError: If not all signals have been assigned when ``strict=True``.
        """
        ...

    def capture(self):  # -> _Capture:
        """Capture the values from the bus, returning an object representing the capture.

        Returns:
            dict: A dictionary that supports access by attribute,
            where each attribute corresponds to each signal's value.

        Raises:
            RuntimeError: If signal not present in bus,
                or attempt to modify a bus capture.
        """
        class _Capture(dict): ...

    def sample(self, obj, strict=...):  # -> None:
        """Sample the values from the bus, assigning them to *obj*.

        Args:
            obj: Object with attribute names that match the bus signals.
            strict (bool, optional): Check that all signals being sampled
                are present in *obj*.

        Raises:
            AttributeError: If attribute is missing in *obj* when ``strict=True``.
        """
        ...

    def __le__(self, value) -> bool:
        """Overload the less than or equal to operator for value assignment"""
        ...
