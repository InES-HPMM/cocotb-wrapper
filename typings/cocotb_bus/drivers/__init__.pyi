"""This type stub file was generated by pyright."""

from typing import Any, Callable, Iterable, Optional, Tuple

from cocotb.decorators import coroutine
from cocotb.handle import SimHandleBase
from cocotb.triggers import Event

"""Set of common driver base classes."""

class BitDriver:
    """Drives a signal onto a single bit.

    Useful for exercising ready/valid flags.
    """
    def __init__(self, signal, clk, generator=...) -> None: ...
    def start(self, generator: Iterable[Tuple[int, int]] = ...) -> None:
        """Start generating data.

        Args:
            generator: Generator yielding data.
                The generator should yield tuples ``(on, off)``
                with the number of cycles to be on,
                followed by the number of cycles to be off.
                Typically the generator should go on forever.

                Example::

                    bit_driver.start((1, i % 5) for i in itertools.count())
        """
        ...

    def stop(self):  # -> None:
        """Stop generating data."""
        ...

class Driver:
    """Class defining the standard interface for a driver within a testbench.

    The driver is responsible for serializing transactions onto the physical
    pins of the interface.  This may consume simulation time.
    """
    def __init__(self) -> None:
        """Constructor for a driver instance."""
        ...

    def kill(self):  # -> None:
        """Kill the coroutine sending stuff."""
        ...

    def append(
        self,
        transaction: Any,
        callback: Callable[[Any], Any] = ...,
        event: Event = ...,
        **kwargs: Any,
    ) -> None:
        """Queue up a transaction to be sent over the bus.

        Mechanisms are provided to permit the caller to know when the
        transaction is processed.

        Args:
            transaction: The transaction to be sent.
            callback: Optional function to be called
                when the transaction has been sent.
            event: :class:`~cocotb.triggers.Event` to be set
                when the transaction has been sent.
            **kwargs: Any additional arguments used in child class'
                :any:`_driver_send` method.
        """
        ...

    def clear(self):  # -> None:
        """Clear any queued transactions without sending them onto the bus."""
        ...

    @coroutine
    async def send(
        self, transaction: Any, sync: bool = ..., **kwargs: Any
    ) -> None:
        """Blocking send call (hence must be "awaited" rather than called).

        Sends the transaction over the bus.

        Args:
            transaction: The transaction to be sent.
            sync: Synchronize the transfer by waiting for a rising edge.
            **kwargs: Additional arguments used in child class'
                :any:`_driver_send` method.
        """
        ...

class BusDriver(Driver):
    """Wrapper around common functionality for buses which have:

        * a list of :attr:`_signals` (class attribute)
        * a list of :attr:`_optional_signals` (class attribute)
        * a clock
        * a name
        * an entity

    Args:
        entity: A handle to the simulator entity.
        name: Name of this bus. ``None`` for a nameless bus, e.g.
            bus-signals in an interface or a ``modport``.
            (untested on ``struct``/``record``, but could work here as well).
        clock: A handle to the clock associated with this bus.
        **kwargs: Keyword arguments forwarded to :class:`cocotb.Bus`,
            see docs for that class for more information.

    """

    _optional_signals = ...
    def __init__(
        self,
        entity: SimHandleBase,
        name: Optional[str],
        clock: SimHandleBase,
        **kwargs: Any,
    ) -> None: ...
    def __str__(self) -> str:
        """Provide the name of the bus"""
        ...

class ValidatedBusDriver(BusDriver):
    """Same as a :class:`BusDriver` except we support an optional generator
    to control which cycles are valid.

    Args:
        entity (SimHandle): A handle to the simulator entity.
        name (str): Name of this bus.
        clock (SimHandle): A handle to the clock associated with this bus.
        valid_generator (generator, optional): a generator that yields tuples of
            ``(valid, invalid)`` cycles to insert.
    """
    def __init__(
        self,
        entity: SimHandleBase,
        name: str,
        clock: SimHandleBase,
        *,
        valid_generator: Iterable[Tuple[int, int]] = ...,
        **kwargs: Any,
    ) -> None: ...
    def set_valid_generator(self, valid_generator=...):  # -> None:
        """Set a new valid generator for this bus."""
        ...

@coroutine
async def polled_socket_attachment(driver, sock):  # -> None:
    """Non-blocking socket attachment that queues any payload received from the
    socket to be queued for sending into the driver.
    """
    ...
