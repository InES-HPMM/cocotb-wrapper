"""This type stub file was generated by pyright."""

import abc

"""
Inspired by https://github.com/python-trio/outcome

An outcome is similar to the builtin `concurrent.futures.Future`
or `asyncio.Future`, but without being tied to a particular task model.
"""

def capture(fn, *args, **kwargs):  # -> Value | Error:
    """Obtain an `Outcome` representing the result of a function call"""
    ...

class Outcome(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def send(self, gen):  # -> None:
        """Send or throw this outcome into a generator"""
        ...

    @abc.abstractmethod
    def get(self, gen):  # -> None:
        """Get the value of this outcome, or throw its exception"""
        ...

class Value(Outcome):
    def __init__(self, value) -> None: ...
    def send(self, gen): ...
    def get(self):  # -> Any:
        ...
    def __repr__(self):  # -> str:
        ...

class Error(Outcome):
    def __init__(self, error) -> None: ...
    def send(self, gen): ...
    def get(self): ...
    def __repr__(self):  # -> str:
        ...
