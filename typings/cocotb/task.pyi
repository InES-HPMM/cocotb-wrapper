"""This type stub file was generated by pyright."""

import typing

import cocotb
import cocotb.triggers
from cocotb.log import SimLog
from cocotb.utils import lazy_property

T = typing.TypeVar("T")
Self = typing.TypeVar("Self")
_debug = ...

class Task(typing.Coroutine[typing.Any, typing.Any, T]):
    """Concurrently executing task.

    This class is not intended for users to directly instantiate.
    Use :func:`cocotb.create_task` to create a Task object,
    or use :func:`cocotb.start_soon` or :func:`cocotb.start` to
    create a Task and schedule it to run.

    .. versionchanged:: 1.8.0
        Moved to the ``cocotb.task`` module.
    """

    _name: str = ...
    _id_count = ...
    def __init__(self, inst) -> None: ...
    @lazy_property
    def log(self) -> SimLog: ...
    @property
    def retval(self) -> T:
        """Return the result of the Task.

        If the Task ran to completion, the result is returned.
        If the Task failed with an exception, the exception is re-raised.
        If the Task is not yet complete, a :exc:`RuntimeError` is raised.

        .. deprecated:: 1.7.0
        """
        ...

    def __iter__(self: Self) -> Self: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def send(self, value: typing.Any) -> typing.Any: ...
    def throw(self, exc: BaseException) -> typing.Any: ...
    def close(self) -> None: ...
    def kill(self) -> None:
        """Kill a coroutine."""
        ...

    def join(self) -> cocotb.triggers.Join:
        """Return a trigger that will fire when the wrapped coroutine exits."""
        ...

    def has_started(self) -> bool:
        """Return ``True`` if the Task has started executing."""
        ...

    def cancel(self, msg: typing.Optional[str] = ...) -> None:
        """Cancel a Task's further execution.

        When a Task is cancelled, a :exc:`asyncio.CancelledError` is thrown into the Task.
        """
        ...

    def cancelled(self) -> bool:
        """Return ``True`` if the Task was cancelled."""
        ...

    def done(self) -> bool:
        """Return ``True`` if the Task has finished executing."""
        ...

    def result(self) -> T:
        """Return the result of the Task.

        If the Task ran to completion, the result is returned.
        If the Task failed with an exception, the exception is re-raised.
        If the Task was cancelled, the CancelledError is re-raised.
        If the coroutine is not yet complete, a :exc:`asyncio.InvalidStateError` is raised.
        """
        ...

    def exception(self) -> typing.Optional[BaseException]:
        """Return the exception of the Task.

        If the Task ran to completion, ``None`` is returned.
        If the Task failed with an exception, the exception is returned.
        If the Task was cancelled, the CancelledError is re-raised.
        If the coroutine is not yet complete, a :exc:`asyncio.InvalidStateError` is raised.
        """
        ...

    def __bool__(self) -> bool:
        """``True`` if Task is not done.

        .. deprecated:: 1.7.0
        """
        ...

    def __await__(self) -> typing.Generator[typing.Any, typing.Any, T]: ...

class _RunningCoroutine(Task[T]):
    """The result of calling a :any:`cocotb.coroutine` decorated coroutine.

    All this class does is provide some extra attributes.

    .. versionchanged:: 1.8.0
        Moved to the ``cocotb.task`` module.
    """
    def __init__(self, inst, parent) -> None: ...

class _RunningTest(_RunningCoroutine[T]):
    """The result of calling a :class:`cocotb.test` decorated object.

    All this class does is change ``__name__`` to show "Test" instead of "Task".

    .. versionchanged:: 1.8.0
        Moved to the ``cocotb.task`` module.
    """

    _name: str = ...
    def __init__(self, inst, parent) -> None: ...
