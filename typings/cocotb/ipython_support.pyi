"""This type stub file was generated by pyright."""

import cocotb
from IPython.terminal.prompts import Prompts

class SimTimePrompt(Prompts):
    """custom prompt that shows the sim time after a trigger fires"""

    _show_time = ...
    def in_prompt_tokens(self, cli=...): ...

async def embed(user_ns: dict = ...):  # -> None:
    """Start an IPython shell in the current coroutine.

    Unlike using :func:`IPython.embed` directly, the :keyword:`await` keyword
    can be used directly from the shell to wait for triggers.
    The :keyword:`yield` keyword from the legacy :ref:`yield-syntax` is not supported.

    This coroutine will complete only when the user exits the interactive session.

    Args:
        user_ns:
            The variables to have made available in the shell.
            Passing ``locals()`` is often a good idea.
            ``cocotb`` will automatically be included.

    Notes:
        If your simulator does not provide an appropriate ``stdin``, you may
        find you cannot type in the resulting shell. Using simulators in batch
        or non-GUI mode may resolve this. This feature is experimental, and
        not all simulators are supported.
    """
    ...

@cocotb.test()
async def run_ipython(dut):  # -> None:
    """A test that launches an interactive Python shell.

    Do not call this directly - use this as ``make MODULE=cocotb.ipython_support``.

    Within the shell, a global ``dut`` variable pointing to the design will be present.
    """
    ...
