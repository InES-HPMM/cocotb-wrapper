"""This type stub file was generated by pyright."""

from collections.abc import Coroutine
from typing import Dict, List, Optional, Union

import cocotb.handle
from cocotb._deprecation import deprecated
from cocotb.regression import RegressionManager
from cocotb.scheduler import Scheduler
from cocotb.task import Task

"""
Cocotb is a coroutine, cosimulation framework for writing testbenches in Python.

See https://docs.cocotb.org for full documentation
"""
scheduler: Optional[Scheduler] = ...
regression_manager: Optional[RegressionManager] = ...
argv: Optional[List[str]] = ...
argc: Optional[int] = ...
plusargs: Optional[Dict[str, Union[bool, str]]] = ...
LANGUAGE: Optional[str] = ...
SIM_NAME: Optional[str] = ...
SIM_VERSION: Optional[str] = ...
RANDOM_SEED: Optional[int] = ...
_library_coverage = ...
top: Optional[cocotb.handle.SimHandleBase] = ...

def fork(coro: Union[Task, Coroutine]) -> Task:
    """Schedule a coroutine to be run concurrently. See :ref:`coroutines` for details on its use.

    .. deprecated:: 1.7.0
        This function has been deprecated in favor of :func:`cocotb.start_soon` and :func:`cocotb.start`.
        In most cases you can simply substitute ``cocotb.fork`` with ``cocotb.start_soon``.
        For more information on when to use ``start_soon`` vs ``start`` see :ref:`coroutines`.
    """
    ...

def start_soon(coro: Union[Task, Coroutine]) -> Task:
    """Schedule a coroutine to be run concurrently.

    Note that this is not an async function,
    and the new task will not execute until the calling task yields control.

    .. versionadded:: 1.6.0
    """
    ...

async def start(coro: Union[Task, Coroutine]) -> Task:
    """Schedule a coroutine to be run concurrently, then yield control to allow pending tasks to execute.

    The calling task will resume execution before control is returned to the simulator.

    .. versionadded:: 1.6.0
    """
    ...

def create_task(coro: Union[Task, Coroutine]) -> Task:
    """Construct a coroutine into a Task without scheduling the Task.

    The Task can later be scheduled with :func:`cocotb.fork`, :func:`cocotb.start`, or
    :func:`cocotb.start_soon`.

    .. versionadded:: 1.6.0
    """
    ...

_rlock = ...

def mem_debug(port):  # -> None:
    ...
@deprecated("This function is now private")
def process_plusargs() -> None: ...
