"""This type stub file was generated by pyright."""

class Wavedrom:
    """Base class for a WaveDrom compatible tracer."""
    def __init__(self, obj, name=...) -> None: ...
    def sample(self):  # -> None:
        """Record a sample of the signal value at this point in time."""
        ...

    def clear(self):  # -> None:
        """Delete all sampled data."""
        ...

    def gap(self):  # -> None:
        ...
    def get(self, add_clock=...):  # -> list[Any]:
        """Return the samples as a list suitable for use with WaveDrom."""
        ...

class trace:
    """Context manager to enable tracing of signals.

    Arguments are an arbitrary number of signals or buses to trace.
    We also require a clock to sample on, passed in as a keyword argument.

    Usage::

        with trace(sig1, sig2, a_bus, clk=clk) as waves:
            # Stuff happens, we trace it

            # Dump to JSON format compatible with WaveDrom
            j = waves.dumpj()
    """
    def __init__(self, *args, clk=...) -> None: ...
    def insert_gap(self):  # -> None:
        ...
    def disable(self):  # -> None:
        ...
    def enable(self):  # -> None:
        ...
    def __enter__(self):  # -> Self:
        ...
    def __exit__(self, exc_type, exc_val, exc_tb):  # -> None:
        ...
    def write(self, filename, **kwargs):  # -> None:
        ...
    def dumpj(self, header=..., footer=..., config=...):  # -> str:
        ...
