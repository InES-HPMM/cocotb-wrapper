"""This type stub file was generated by pyright."""

import logging
import typing

"""
Everything related to logging
"""
_suppress = ...
_LEVEL_CHARS = ...
_RECORD_CHARS = ...
_FILENAME_CHARS = ...
_LINENO_CHARS = ...
_FUNCNAME_CHARS = ...
_COCOTB_LOG_LEVEL_DEFAULT = ...

def default_config():  # -> None:
    """Apply the default cocotb log formatting to the root logger.

    This hooks up the logger to write to stdout, using either
    :class:`SimColourLogFormatter` or :class:`SimLogFormatter` depending
    on whether colored output is requested. It also adds a
    :class:`SimTimeContextFilter` filter so that
    :attr:`~logging.LogRecord.created_sim_time` is available to the formatter.

    The logging level for cocotb logs is set based on the
    :envvar:`COCOTB_LOG_LEVEL` environment variable, which defaults to ``INFO``.

    If desired, this logging configuration can be overwritten by calling
    ``logging.basicConfig(..., force=True)`` (in Python 3.8 onwards), or by
    manually resetting the root logger instance.
    An example of this can be found in the section on :ref:`rotating-logger`.

    .. versionadded:: 1.4
    """
    ...

class SimBaseLog(logging.getLoggerClass()):
    """This class only exists for backwards compatibility"""
    @property
    def logger(self):  # -> Self:
        ...
    @property
    def colour(self):  # -> bool | Any:
        ...
    def setLevel(self, level: typing.Union[int, str]) -> None: ...

def SimLog(name, ident=...):  # -> Logger:
    """Like logging.getLogger, but append a numeric identifier to the name"""
    ...

class SimTimeContextFilter(logging.Filter):
    """A filter to inject simulator times into the log records.

    This uses the approach described in the :ref:`Python logging cookbook <python:filters-contextual>`.

    This adds the :attr:`~logging.LogRecord.created_sim_time` attribute.

    .. versionadded:: 1.4
    """
    def __init__(self) -> None:
        """"""
        ...

    def filter(self, record):  # -> Literal[True]:
        ...

class SimLogFormatter(logging.Formatter):
    """Log formatter to provide consistent log message handling.

    This will only add simulator timestamps if the handler object this
    formatter is attached to has a :class:`SimTimeContextFilter` filter
    attached, which cocotb ensures by default.
    """
    def __init__(self) -> None:
        """Takes no arguments."""
        ...

    @staticmethod
    def ljust(string, chars): ...
    @staticmethod
    def rjust(string, chars): ...
    def format(self, record):
        """Prettify the log output, annotate with simulation time"""
        ...

class SimColourLogFormatter(SimLogFormatter):
    """Log formatter to provide consistent log message handling."""

    loglevel2colour = ...
    def format(self, record):
        """Prettify the log output, annotate with simulation time"""
        ...
