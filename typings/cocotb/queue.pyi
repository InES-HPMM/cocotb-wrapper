"""This type stub file was generated by pyright."""

import asyncio.queues
from typing import Generic, TypeVar

class QueueFull(asyncio.queues.QueueFull):
    """Raised when the Queue.put_nowait() method is called on a full Queue."""

    ...

class QueueEmpty(asyncio.queues.QueueEmpty):
    """Raised when the Queue.get_nowait() method is called on a empty Queue."""

    ...

T = TypeVar("T")

class Queue(Generic[T]):
    """A queue, useful for coordinating producer and consumer coroutines.

    If *maxsize* is less than or equal to 0, the queue size is infinite. If it
    is an integer greater than 0, then :meth:`put` will block when the queue
    reaches *maxsize*, until an item is removed by :meth:`get`.
    """
    def __init__(self, maxsize: int = ...) -> None: ...
    def __repr__(self):  # -> str:
        ...
    def __str__(self) -> str: ...
    def __class_getitem__(cls, type):  # -> type[Self]:
        ...
    def qsize(self) -> int:
        """Number of items in the queue."""
        ...

    @property
    def maxsize(self) -> int:
        """Number of items allowed in the queue."""
        ...

    def empty(self) -> bool:
        """Return ``True`` if the queue is empty, ``False`` otherwise."""
        ...

    def full(self) -> bool:
        """Return ``True`` if there are :meth:`maxsize` items in the queue.

        .. note::
            If the Queue was initialized with ``maxsize=0`` (the default), then
            :meth:`full` is never ``True``.
        """
        ...

    async def put(self, item: T) -> None:
        """Put an *item* into the queue.

        If the queue is full, wait until a free
        slot is available before adding the item.
        """
        ...

    def put_nowait(self, item: T) -> None:
        """Put an *item* into the queue without blocking.

        If no free slot is immediately available, raise :exc:`asyncio.QueueFull`.
        """
        ...

    async def get(self) -> T:
        """Remove and return an item from the queue.

        If the queue is empty, wait until an item is available.
        """
        ...

    def get_nowait(self) -> T:
        """Remove and return an item from the queue.

        Return an item if one is immediately available, else raise
        :exc:`asyncio.QueueEmpty`.
        """
        ...

class PriorityQueue(Queue):
    r"""A subclass of :class:`Queue`; retrieves entries in priority order (smallest item first).

    Entries are typically tuples of the form ``(priority number, data)``.
    """

    ...

class LifoQueue(Queue):
    """A subclass of :class:`Queue`; retrieves most recently added entries first."""

    ...
